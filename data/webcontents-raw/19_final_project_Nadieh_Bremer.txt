<!DOCTYPE html>
<html lang="en-us">
    <head><meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'><meta name='description' content='See the evolution of my Fab Academy final project'><title>Final Project</title>

<link rel='canonical' href='http://fabacademy.org/2021/labs/waag/students/nadieh-bremer/final-project/'>

<link rel="stylesheet" href="../scss/style.min.css"><meta property='og:title' content='Final Project'>
<meta property='og:description' content='See the evolution of my Fab Academy final project'>
<meta property='og:url' content='http://fabacademy.org/2021/labs/waag/students/nadieh-bremer/final-project/'>
<meta property='og:site_name' content='Nadieh&#39;s Fab Academy'>
<meta property='og:type' content='article'><meta property='article:section' content='Page' />
<meta name="twitter:site" content="NadiehBremer"><meta name="twitter:title" content="Final Project">
<meta name="twitter:description" content="See the evolution of my Fab Academy final project"><link rel="shortcut icon" href='../img/favicon.ico' /><link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;0,400;0,900;1,400&family=Lobster+Two:wght@700&family=Source+Code+Pro:wght@400;700&display=swap" rel="stylesheet">
    </head>
    <body class="article-page keep-sidebar">
    <script>
        (function() {
            const colorSchemeKey = 'StackColorScheme';
            if(!localStorage.getItem(colorSchemeKey)){
                localStorage.setItem(colorSchemeKey, "auto");
            }
        })();
    </script><script>
    (function() {
        const colorSchemeKey = 'StackColorScheme';
        const colorSchemeItem = localStorage.getItem(colorSchemeKey);
        const supportDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches === true;

        if (colorSchemeItem == 'dark' || colorSchemeItem === 'auto' && supportDarkMode) {
            

            document.body.dataset.scheme = 'dark';
        } else {
            document.body.dataset.scheme = 'light';
        }
    })();
</script><div class="container main-container flex on-phone--column extended ">
            <aside class="sidebar left-sidebar sticky">
    <button class="hamburger hamburger--spin" type="button" id="toggle-menu" aria-label="Toggle Menu">
        <span class="hamburger-box">
            <span class="hamburger-inner"></span>
        </span>
    </button>

    <header class="site-info">
        <h1 class="site-name"><a href="http://fabacademy.org/2021/labs/waag/students/nadieh-bremer/">Nadieh&#39;s Fab Academy</a></h1>
        <p class="site-description">Keeping track of my documentation for each week of Fab Academy 2021</p>
    </header>

    <ol class="menu" id="main-menu">
        
        
        

        <li >
            <a href='../'>
                
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-home" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z"/>
  <polyline points="5 12 3 12 12 3 21 12 19 12" />
  <path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7" />
  <path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6" />
</svg>



                
                <span>Home</span>
            </a>
        </li>
        
        

        <li >
            <a href='../about'>
                
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-user" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z"/>
  <circle cx="12" cy="7" r="4" />
  <path d="M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2" />
</svg>



                
                <span>About Me</span>
            </a>
        </li>
        
        

        <li >
            <a href='../blog'>
                
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-notebook" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
  <path d="M6 4h11a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-11a1 1 0 0 1 -1 -1v-14a1 1 0 0 1 1 -1m3 0v18" />
  <line x1="13" y1="8" x2="15" y2="8" />
  <line x1="13" y1="12" x2="15" y2="12" />
</svg>
                
                <span>Weekly Assignments</span>
            </a>
        </li>
        
        

        <li  class='current' >
            <a href='../final-project'>
                
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-puzzle" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
  <path d="M4 7h3a1 1 0 0 0 1 -1v-1a2 2 0 0 1 4 0v1a1 1 0 0 0 1 1h3a1 1 0 0 1 1 1v3a1 1 0 0 0 1 1h1a2 2 0 0 1 0 4h-1a1 1 0 0 0 -1 1v3a1 1 0 0 1 -1 1h-3a1 1 0 0 1 -1 -1v-1a2 2 0 0 0 -4 0v1a1 1 0 0 1 -1 1h-3a1 1 0 0 1 -1 -1v-3a1 1 0 0 1 1 -1h1a2 2 0 0 0 0 -4h-1a1 1 0 0 1 -1 -1v-3a1 1 0 0 1 1 -1" />
</svg>
                
                <span>Final Project</span>
            </a>
        </li>
        
        

        <li >
            <a href='../commands'>
                
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-terminal" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
  <path d="M5 7l5 5l-5 5" />
  <line x1="12" y1="19" x2="19" y2="19" />
</svg>
                
                <span>Commands</span>
            </a>
        </li>
        

        
            <li id="dark-mode-toggle">
                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-toggle-left" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z"/>
  <circle cx="8" cy="12" r="2" />
  <rect x="2" y="6" width="20" height="12" rx="6" />
</svg>



                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-toggle-right" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z"/>
  <circle cx="16" cy="12" r="2" />
  <rect x="2" y="6" width="20" height="12" rx="6" />
</svg>



                <span>Dark Mode</span>
            </li>
        
    </ol>
</aside>

            <main class="main full-width">
    <article class="main-article">
    <header class="article-header">

    <div class="article-details">

    <h1 class="article-title">
        <a href="../final-project/">Final Project</a>
    </h1>

    
    
</div>
</header>

    <section class="article-content">
    <p>For my final project I&rsquo;m aiming to create:</p>
<blockquote>
<p>A jigsaw puzzle where placing each piece correctly will spark a mini light show.</p>
</blockquote>
<p>Many people enjoy the feeling of clicking / pushing each piece into a puzzle, me included. For my final project <strong>I want to make the act of puzzling and placing each piece correctly even more fun</strong> and exhilarating for any puzzle enthusiast.</p>
<h2 id="final-result">Final Result</h2>

<img src='../presentation.png'  alt='NOVA | My final project' ></img>



<figure >
    
        <video class='controls' controls="true" playsinline  poster='../presentation_poster.png' ><source src='../presentation.mp4' type="video/mp4"></video>
     
    
    <figcaption>Video of NOVA</figcaption>
    
</figure>
<p>The music in the video is by <a class="link" href="https://icons8.com/music/author/nordgroove"  target="_blank" rel="noopener"
    >Nordgroove</a>. We had to get the file size of a ±1-minute 1920x1080 video below 10Mb, so apologies for the poor quality (for a video created during this time and age <span class="kaomoji">(&gt;﹏&lt;)</span>
)</p>
<p>Below is the command I used to get my 180Mb video of 71 seconds to be smaller than 10Mb:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ffmpeg -i nova.mp4 -vcodec libx264 -crf <span class="m">34</span> -preset veryslow -vf <span class="nv">fps</span><span class="o">=</span><span class="m">24</span> output.mp4
</code></pre></div><h3 id="hero-shots">Hero Shots</h3>
<p><figure style="flex-grow: 133; flex-basis: 320px">
		<a href="../final-project/hero_overview.jpg" data-size="820x615">
			
			<img src="../final-project/hero_overview.jpg"
				
				width="820"
				height="615"
				loading="lazy"
				alt="My camera is actually not able to properly capture the actual lights my eyes see, but it&rsquo;s very colorful indeed">
		</a>
		
		<figcaption>My camera is actually not able to properly capture the actual lights my eyes see, but it’s very colorful indeed</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 145; flex-basis: 350px">
		<a href="../final-project/hero_pieces_light_zoom.jpg" data-size="820x562">
			
			<img src="../final-project/hero_pieces_light_zoom.jpg"
				
				width="820"
				height="562"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 146; flex-basis: 350px">
		<a href="../final-project/hero_pieces_from_bag.jpg" data-size="500x342">
			
			<img src="../final-project/hero_pieces_from_bag.jpg"
				
				width="500"
				height="342"
				loading="lazy"
				alt="Puzzle pieces from ±5mm thick milky white acrylic">
		</a>
		
		<figcaption>Puzzle pieces from ±5mm thick milky white acrylic</figcaption>
		
	</figure> <figure style="flex-grow: 133; flex-basis: 320px">
		<a href="../final-project/hero_pieces_close.jpg" data-size="500x375">
			
			<img src="../final-project/hero_pieces_close.jpg"
				
				width="500"
				height="375"
				loading="lazy"
				alt="A spirograph design etched from the top and copper bridges along the bottom">
		</a>
		
		<figcaption>A spirograph design etched from the top and copper bridges along the bottom</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 184; flex-basis: 442px">
		<a href="../final-project/hero_living_hinge.jpg" data-size="820x445">
			
			<img src="../final-project/hero_living_hinge.jpg"
				
				width="820"
				height="445"
				loading="lazy"
				alt="A &ldquo;living hinge&rdquo; of 3mm wood wrapped around the outside">
		</a>
		
		<figcaption>A “living hinge” of 3mm wood wrapped around the outside</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 177; flex-basis: 425px">
		<a href="../final-project/hero_look_inside.jpg" data-size="820x462">
			
			<img src="../final-project/hero_look_inside.jpg"
				
				width="820"
				height="462"
				loading="lazy"
				alt="Looking through the holes in the living hinge, you can still see the electronics inside">
		</a>
		
		<figcaption>Looking through the holes in the living hinge, you can still see the electronics inside</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 136; flex-basis: 326px">
		<a href="../final-project/hero_bottom_spirograph.jpg" data-size="500x367">
			
			<img src="../final-project/hero_bottom_spirograph.jpg"
				
				width="500"
				height="367"
				loading="lazy"
				alt="The spirograph design milled out of the bottom">
		</a>
		
		<figcaption>The spirograph design milled out of the bottom</figcaption>
		
	</figure> <figure style="flex-grow: 140; flex-basis: 338px">
		<a href="../final-project/hero_bottom_spirograph_filed_zoom.jpg" data-size="500x355">
			
			<img src="../final-project/hero_bottom_spirograph_filed_zoom.jpg"
				
				width="500"
				height="355"
				loading="lazy"
				alt="After some sanding, the pattern became quite nice">
		</a>
		
		<figcaption>After some sanding, the pattern became quite nice</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 162; flex-basis: 389px">
		<a href="../final-project/hero_top.jpg" data-size="820x505">
			
			<img src="../final-project/hero_top.jpg"
				
				width="820"
				height="505"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 140; flex-basis: 337px">
		<a href="../final-project/hero_puzzle_disassembly_1.jpg" data-size="500x356">
			
			<img src="../final-project/hero_puzzle_disassembly_1.jpg"
				
				width="500"
				height="356"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 140; flex-basis: 337px">
		<a href="../final-project/hero_puzzle_disassembly_2.jpg" data-size="500x356">
			
			<img src="../final-project/hero_puzzle_disassembly_2.jpg"
				
				width="500"
				height="356"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 140; flex-basis: 336px">
		<a href="../final-project/hero_puzzle_disassembly_3.jpg" data-size="820x584">
			
			<img src="../final-project/hero_puzzle_disassembly_3.jpg"
				
				width="820"
				height="584"
				loading="lazy"
				alt="Disassembling the puzzle enclosure in 5 steps">
		</a>
		
		<figcaption>Disassembling the puzzle enclosure in 5 steps</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 140; flex-basis: 337px">
		<a href="../final-project/hero_puzzle_disassembly_4.jpg" data-size="500x356">
			
			<img src="../final-project/hero_puzzle_disassembly_4.jpg"
				
				width="500"
				height="356"
				loading="lazy"
				alt="The top section as seen from the bottom">
		</a>
		
		<figcaption>The top section as seen from the bottom</figcaption>
		
	</figure> <figure style="flex-grow: 140; flex-basis: 337px">
		<a href="../final-project/hero_puzzle_disassembly_5.jpg" data-size="500x356">
			
			<img src="../final-project/hero_puzzle_disassembly_5.jpg"
				
				width="500"
				height="356"
				loading="lazy"
				alt="The acrylic center">
		</a>
		
		<figcaption>The acrylic center</figcaption>
		
	</figure></p>
<h2 id="sketch--idea">Sketch &amp; Idea</h2>
<p>This would be a puzzle where each piece is made of some semi-see-through material. Each piece would either contain a light, or the location below each piece (the board on which you assemble the puzzle) would have a light. When you correctly place a piece, it would spark a mini light show Preferably, the more pieces you&rsquo;ve already assembled, the more elaborate the light show becomes. In the final result I did make some changes and continuously show a light show, but have a &ldquo;spark&rdquo; that goes through the board whenever a new piece is placed.</p>
<p>Below you can see a (very) rough sketch of the puzzle that I made at the start of this journey:</p>
<p><figure style="flex-grow: 54; flex-basis: 131px">
		<a href="../final-project/light_puzzle_sketch.jpg" data-size="1200x2185">
			
			<img src="../final-project/light_puzzle_sketch.jpg"
				
				width="1200"
				height="2185"
				loading="lazy"
				alt="A rough top and top-side view of the puzzle idea">
		</a>
		
		<figcaption>A rough top and top-side view of the puzzle idea</figcaption>
		
	</figure></p>
<p>I tried finding what other people have done that is similar to this in the Fab Academy search. However, it came up empty, I wasn&rsquo;t able to find anybody that previously combined the idea of jigsaw puzzles and light. I like that though <span class="kaomoji">(*≧▽≦)</span>
 It means that I&rsquo;m not biased by earlier designs, that I have nothing to live up to, and I can really see this as something that I&rsquo;ll have built myself (well, my partner, and Henk, helped a lot with being my brainstorming partner on how to handle some of the more practical things of putting it all together.)</p>
<p>Searching for &ldquo;light jigsaw puzzle&rdquo; more generally on the web even came up empty. I only found puzzles about the aurora, and a specific type of lamp called &ldquo;IQ Light Jigsaw Lamp&rdquo;, which has nothing to do with my project. This <a class="link" href="https://www.instructables.com/LED-Jigsaw-Puzzle-Light-Acrylic-Laser-Cut/"  target="_blank" rel="noopener"
    >LED Jigsaw Puzzle Light</a> probably came the closest, but it&rsquo;s still far off from my idea. It uses etched acrylic with a light source from the side of the puzzle to show a pattern. However I want to be able to control the lights individually below each piece, so the light will need to come from the bottom, instead of one fixed light along the sides. I also found this <a class="link" href="https://www.bol.com/nl/p/kleurige-tetris-lamp-3d-puzzles-lamp-stapelbare-led-tafellamp-sfeerlicht-retro-tetrislamp-licht-bouwstenen-jigsaw-puzzle-nachtlampje-puzzels-lamp/9300000007980388/"  target="_blank" rel="noopener"
    >Tetris Lamp</a> where each Tetris piece is a light source, which light up when stacked together. Although a cool idea, these Tetris blocks are much bigger than what I intend my puzzle pieces to be, and they only emit one color of light.</p>
<p><em>You can read much more details about the puzzle idea in my <a class="link" href="../blog/week-1b/" >Principles and Practices</a> blog.</em></p>
<h2 id="3d-model">3D Model</h2>
<p>Below you can see a 3D model of my idea. I used a hexagonal shape for the interior and kept the puzzle pieces straightforward (and not unique) yet, because I feel that I first need to figure out how I will do the electronics before I can settle on the type of puzzle piece design.</p>
<p><figure style="flex-grow: 149; flex-basis: 359px">
		<a href="../final-project/3D_blender_final_static.jpg" data-size="1000x667">
			
			<img src="../final-project/3D_blender_final_static.jpg"
				
				width="1000"
				height="667"
				loading="lazy"
				alt="A render of my &ldquo;puzzle box&rdquo; in Blender">
		</a>
		
		<figcaption>A render of my “puzzle box” in Blender</figcaption>
		
	</figure></p>
<p>The model from Fusion 360 turned out the most complete, which I imported into Blender to create a nice final render with.</p>
<p>However, now that I can better see the result in 3D, <strong>I&rsquo;m not that sure anymore if I want the cubby holes</strong> along the side. If the puzzle pieces turn out to become very thick, than even those holes will not be enough to stow away all the pieces. So I might have to rethink that part and perhaps work with some sort of cover that goes over the top of the box that doesn&rsquo;t go all the way down, and where you&rsquo;d keep the puzzle pieces in a nice (velvet) bag in the middle of the box.</p>
<p>Another reason for possibly taking out the cubby holes is that I also don&rsquo;t want the puzzle box to become too big, and the cubby holes are making it bigger.</p>
<p><em>You can read much more details about the creation of this 3D model in my <a class="link" href="../blog/week-2/" >Computer-Aided Design</a> blog.</em></p>
<h2 id="input-sensor-tests">Input Sensor Tests</h2>
<p>During the &ldquo;Input Devices&rdquo; week I wanted to <strong>explore ways in which I could detect puzzle pieces being placed on my board</strong>.</p>
<p>For a while before this week started I was considering using <strong>RFID chips</strong> to detect the pieces. It would have the benefit of being able to detect exactly which piece was being placed. However, there were a few downsides I started to realize when talking to other people: the scanners aren&rsquo;t meant to handle multiple chips at once, and it would be very very likely that you got noise and interference. You could know <em>that</em> a piece was placed, but you&rsquo;d need a separate scanner at each puzzle piece location to know <em>where</em> it had been placed, which would be very complex, and probably multiple scanners would pick up the same piece. There were even more reasons to not use RFID, and when I realized that <strong>I don&rsquo;t necessarily need to know if the puzzle piece being placed is correct. I need to make sure that each puzzle piece is unique and can only fit in one location</strong> I abandoned RFID as an option.</p>
<p>Instead I looked two other ways to sense if a puzzle piece was placed on the board: <strong>simple switches</strong> and <strong>capacitive touch/sensing</strong>.</p>
<p>I did get the capacitive touch sensors to work on the board that I&rsquo;d created during the &ldquo;Input Devices&rdquo; week. However, I felt that the results of this type of sensor were a bit unreliable and a bit complex. Both in their design but also in their coding. Furthermore, I didn&rsquo;t need to use <em>touch</em> of a human, I could use the puzzle pieces themselves to go for a much simpler and more reliable type of sensor; a switch.</p>
<p>For the <strong>switch</strong>, I imagine to <strong>create two contact points for each puzzle piece location on the board</strong>. One of these points is connected to a microcontroller pin, while the other is connected to ground. On the bottom of the puzzle piece there will be a small &ldquo;bridge&rdquo; that creates a connection between the contact points on the board when placed.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/input_sensor_board.jpg" data-size="500x500">
			
			<img src="../final-project/input_sensor_board.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="My &ldquo;input sensor&rdquo; test board">
		</a>
		
		<figcaption>My “input sensor” test board</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/input_sensor_switch_setup.jpg" data-size="500x500">
			
			<img src="../final-project/input_sensor_switch_setup.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Setting up to test one of the two &ldquo;external switches&rdquo;">
		</a>
		
		<figcaption>Setting up to test one of the two “external switches”</figcaption>
		
	</figure></p>
<p>I then read out the state of all the pins connected to contact points, and can read the following: which pieces are already on the board (creating connections), if a piece was recently placed (very important, because this initiates the &ldquo;light show&rdquo;), and which places are still empty. For example, checking the state of one pin can be as straightforward as:</p>
<div class="highlight"><pre class="chroma"><code class="language-C" data-lang="C"><span class="c1">//Read the state of a pin
</span><span class="c1"></span><span class="cp">#define pin_switch 7
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">pin_switch</span><span class="p">,</span> <span class="n">INPUT_PULLUP</span><span class="p">);</span> <span class="c1">//use the internal pullup resistor
</span><span class="c1"></span><span class="p">}</span><span class="c1">//void setup
</span><span class="c1"></span>
<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//Get the value from the switch sensor, 1 = no connection
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">sensor_switch</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">pin_switch</span><span class="p">);</span>
  <span class="c1">//Do something with it...
</span><span class="c1"></span><span class="p">}</span><span class="c1">//void loop
</span></code></pre></div><p><em>You can read much more details about the test performed for the input sensors in my <a class="link" href="../blog/week-11/" >Input Devices</a> blog.</em></p>
<h2 id="the-puzzle-pieces">The Puzzle Pieces</h2>
<p>Once I made the decision that my puzzle pieces would only act as simple switches, creating a connection between two contact points on the bottom puzzle plate, not needing any complex electronics inside of them, I tried to think of how I could embed that &ldquo;connection&rdquo; into a puzzle piece.</p>
<h3 id="copper-plate-bridges">Copper Plate Bridges</h3>
<p>My first idea was to create a tiny bridge from the standard copper plate that we use for PCBs, etch out that same shape from the puzzle piece and glue it in there. That meant that the etching had to be done to quite an exact depth, otherwise the copper bridge would be too deep, or stick out too far, making the piece wobble and result in a bad contact point.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_first_test_copper_circles.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_first_test_copper_circles.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt="Milled out tiny contact points and bridge from standard copper plates">
		</a>
		
		<figcaption>Milled out tiny contact points and bridge from standard copper plates</figcaption>
		
	</figure></p>
<p>I milled a simple prototype of two contact points and &ldquo;bridge&rdquo; to connect them from some copper plate.</p>
<p>With the same image of the tiny bridge I created a file with some copies of the shape and different speed and power outputs in text next to it. I used a &ldquo;reference acrylic sheet&rdquo; that hangs to the right of the laser cutter to see around what speed/power the etching seems to go deep enough and around what values I should do these tests to fine-tune the depth.</p>
<p>Within <em>LightBurn</em>, the laser cutter software, I learned how to do an <em>engraving</em>, by setting the <em>mode</em> to <em>Image</em>. You then get a lot more options in the <em>Cut Settings</em> window, such as choosing how close together the lines should be with the <em>Line Interval</em>. The other quite important setting is the <em>Image Mode</em>, where you can choose how the machine should handle gradients; using half-tone or dithering for example.</p>
<p><figure style="flex-grow: 135; flex-basis: 324px">
		<a href="../final-project/pieces_etching_lightburn.jpg" data-size="820x607">
			
			<img src="../final-project/pieces_etching_lightburn.jpg"
				
				width="820"
				height="607"
				loading="lazy"
				alt="Setting up several etching tests in LightBurn and different power and speed settings">
		</a>
		
		<figcaption>Setting up several etching tests in LightBurn and different power and speed settings</figcaption>
		
	</figure></p>
<p>After each etching I would test the depth with a caliper and with the tiny bridge. I noticed that I had to make the bridge shape itself about 3px bigger, otherwise the copper bridge wouldn&rsquo;t fit inside. Finally, at around a speed of 260 and power of 250 did I get to a depth that was <em>just</em> a little smaller than the height of the copper bridge.</p>
<p><figure style="flex-grow: 96; flex-basis: 231px">
		<a href="../final-project/pieces_etching_test_1.jpg" data-size="500x519">
			
			<img src="../final-project/pieces_etching_test_1.jpg"
				
				width="500"
				height="519"
				loading="lazy"
				alt="Running some etching tests">
		</a>
		
		<figcaption>Running some etching tests</figcaption>
		
	</figure> <figure style="flex-grow: 76; flex-basis: 183px">
		<a href="../final-project/pieces_etching_test_2.jpg" data-size="500x655">
			
			<img src="../final-project/pieces_etching_test_2.jpg"
				
				width="500"
				height="655"
				loading="lazy"
				alt="After even more etching tests">
		</a>
		
		<figcaption>After even more etching tests</figcaption>
		
	</figure></p>
<p>I grabbed a standard SVG puzzle piece shape from somewhere online, etched the bridge into a thick piece of acrylic and then cut out the puzzle shape (using <em>way</em> too high settings, badly burning the piece itself (there was no cover on the acrylic anymore)).</p>
<p><figure style="flex-grow: 148; flex-basis: 356px">
		<a href="../final-project/pieces_first_dummy.jpg" data-size="500x337">
			
			<img src="../final-project/pieces_first_dummy.jpg"
				
				width="500"
				height="337"
				loading="lazy"
				alt="A (badly burned) first dummy puzzle piece">
		</a>
		
		<figcaption>A (badly burned) first dummy puzzle piece</figcaption>
		
	</figure></p>
<p>However, later I completely abandoned this idea with using copper plate etched into the piece. It was just too much of a risk with having to etch out the <em>exact</em> depth on each piece, with the laser cutter not always giving the same output at every location along the laser bed.</p>
<h3 id="drawing-the-pieces">Drawing the Pieces</h3>
<p>To take my mind off how to create the &ldquo;connector bridge&rdquo; for a bit, I wanted to design the puzzle pieces themselves. To go from a dummy &ldquo;prototype&rdquo; piece to the actual puzzle I used <a class="link" href="https://affinity.serif.com/en-gb/"  target="_blank" rel="noopener"
    ><em>Affinity Designer</em></a> to draw them by hand, because I needed each piece to be unique, but also because I personally love puzzles the most if they have non-standard pieces.</p>
<p>The reason why I felt like Affinity Designer was a good tool to draw the puzzle pieces with is because:</p>
<ul>
<li>It&rsquo;s mostly like Adobe Illustrator, in that it can work with vectors, and thus SVGs, which I&rsquo;d need to cut the pieces with a laser cutter.</li>
<li>It <em>also</em> has a Adobe PhotoShop element to it, using pixels instead of vectors. You can thus have pixel layers and vectors layers in the same file, which I could use to <em>draw</em> each piece by hand.</li>
<li>Its iPad app is really good, so I could use my Apple pen to draw the pieces by hand, but digitally.</li>
</ul>
<p>On the iPad app I started with a blank canvas of 300x300mm and drew a grey hexagon that was 280mm in diameter, the exact size I&rsquo;d defined for my puzzle area. Next, I made a <em>pixel</em> layer, selected a simple <em>pencil-like</em> brush and drew rough lines to split the hexagon into separate sections. Once I had a division of the hexagon that I liked, I saw it had 38 pieces, which seemed like a good number.</p>
<p>Adding a new <em>pixel</em> layer I drew the puzzle pieces more detailed, including the puzzle ears.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_affinity_rough_areas.png" data-size="820x820">
			
			<img src="../final-project/pieces_affinity_rough_areas.png"
				
				width="820"
				height="820"
				loading="lazy"
				alt="Dividing the puzzle area into rough shapes per piece">
		</a>
		
		<figcaption>Dividing the puzzle area into rough shapes per piece</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_affinity_sketched.png" data-size="820x820">
			
			<img src="../final-project/pieces_affinity_sketched.png"
				
				width="820"
				height="820"
				loading="lazy"
				alt="Drawing the ears of each puzzle piece">
		</a>
		
		<figcaption>Drawing the ears of each puzzle piece</figcaption>
		
	</figure></p>
<p>Finally, I added a <em>vector</em> layer on top and selected the <em>pen tool</em> to draw all those lines as vectors. There&rsquo;s a really nice function in Affinity that lets you draw smooth lines, by using something called a &ldquo;rope&rdquo;, where there&rsquo;s a tiny imaginary rope going from the point where the pen&rsquo;s tip is to the actual line. While you&rsquo;re drawing, you&rsquo;re pulling that rope along, as if it&rsquo;s moving through some thick mud behind it. This basically smooths out the jiggles in your hand to create nicer curves. <a class="link" href="https://affinity.serif.com/en-us/tutorials/designer/ipad/video/272749894/"  target="_blank" rel="noopener"
    >This</a> tutorial shows the concept <em>much</em> better than me trying to explain it in words.</p>
<p>The downside is that it also smooths out the line you&rsquo;ve drawn, it&rsquo;s not really meant for the &ldquo;puzzle ears&rdquo;, so I had to do <em>a lot</em> of adjusting of the drawn line to truly have it follow the sketched version; adding extra nodes along the line, fine-tuning their orientations and such.</p>
<p><figure style="flex-grow: 133; flex-basis: 320px">
		<a href="../final-project/pieces_affinity_line_nodes.PNG" data-size="820x615">
			
			<img src="../final-project/pieces_affinity_line_nodes.PNG"
				
				width="820"
				height="615"
				loading="lazy"
				alt="An adjusted SVG line with all the &ldquo;nodes&rdquo; visible that determine the curves">
		</a>
		
		<figcaption>An adjusted SVG line with all the “nodes” visible that determine the curves</figcaption>
		
	</figure></p>
<p>A few hours of tweaking later and I had recreated the sketch as SVG lines.</p>
<p><figure style="flex-grow: 133; flex-basis: 320px">
		<a href="../final-project/pieces_affinity_final.PNG" data-size="820x615">
			
			<img src="../final-project/pieces_affinity_final.PNG"
				
				width="820"
				height="615"
				loading="lazy"
				alt="Having redrawn all the sketched lines as SVG lines">
		</a>
		
		<figcaption>Having redrawn all the sketched lines as SVG lines</figcaption>
		
	</figure></p>
<p>I gave each piece an ID that I would be using during the further development and while programming the lights.</p>
<p><figure style="flex-grow: 92; flex-basis: 222px">
		<a href="../final-project/pieces_numbering.png" data-size="706x762">
			
			<img src="../final-project/pieces_numbering.png"
				
				width="706"
				height="762"
				loading="lazy"
				alt="The ID of each piece">
		</a>
		
		<figcaption>The ID of each piece</figcaption>
		
	</figure></p>
<h3 id="prototyping">Prototyping</h3>
<p>I wanted to create a first test from cardboard. I didn&rsquo;t need my pieces to have a super tight fit, they didn&rsquo;t need to <em>lock</em> together so tightly that you had to use force, but should nicely fit inside each other. On the other hand, it also shouldn&rsquo;t be <em>too</em> loose of a fit. I was wondering if the extra material that the laser cuts away, the <em>kerf</em>, would result in a nice, or a too loose of a fit.</p>
<p>I loaded the puzzle SVG into the laser cutting software, placed a cardboard sheet on the bed and did a framing to see if the remaining space on the cardboard was big enough. And the laser head just kept moving down, down, down, until it reached the end of the bed. Thankfully, there were software <em>end stops</em> so the head didn&rsquo;t try and go beyond its limits.</p>
<p>I checked the size of the SVG loaded into LightBurn and saw that it was <em>way</em> too big! I had a vague memory that fellow students had this issue as well in the first laser cutting week, something to do with scaling.</p>
<p>I opened up the SVG file in <em>Visual Studio Code</em> and noticed that the width and height of the SVG were set as <code>width=&quot;100%&quot; height=&quot;100%&quot;</code>. That wasn&rsquo;t very helpful. I therefore changed it to <code>width=&quot;30cm&quot; height=&quot;30cm&quot;</code>, reloaded it into LightBurn, and now it was appearing at the right size.</p>
<p><figure style="flex-grow: 315; flex-basis: 756px">
		<a href="../final-project/pieces_svg_setting.png" data-size="350x111">
			
			<img src="../final-project/pieces_svg_setting.png"
				
				width="350"
				height="111"
				loading="lazy"
				alt="Making sure to have the width and height set to actual &ldquo;cm&rdquo; values not &ldquo;%&#34;">
		</a>
		
		<figcaption>Making sure to have the width and height set to actual “cm” values not “%&quot;</figcaption>
		
	</figure></p>
<p>I made the mistake of setting the speed of the laser cutter too high (speed 60, max power of 35%), which made the curves jiggly and crooked. Thankfully, that didn&rsquo;t <em>really</em> matter for this test, and I&rsquo;d be using much lower speeds for acrylic (but still good to remember to go as slow as possible the next time).</p>
<p>I noticed during the cutting that, while the laser followed the lines, some parts of the cardboard were already partially cut out and fell to the bottom, whereas there were still some internal lines to cut. Those final internal lines seemed to result in thicker lines having been cut away (due to them being just out of focus). You can notice it a little on some lines in the image below having larger black gaps in between them.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_cardboard_test.jpg" data-size="820x820">
			
			<img src="../final-project/pieces_cardboard_test.jpg"
				
				width="820"
				height="820"
				loading="lazy"
				alt="Having cut the pieces from cardboard">
		</a>
		
		<figcaption>Having cut the pieces from cardboard</figcaption>
		
	</figure></p>
<p>This was probably partly due to the cardboard not being perfectly flat. However, I didn&rsquo;t expect this to be much of an issue for acrylic, since that&rsquo;s quite flat and wouldn&rsquo;t &ldquo;fall away&rdquo; like the cardboard did.</p>
<p>I had expected that the <code>±0.17mm</code> <em>kerf</em> of the laser would result in a <em>nice</em> fit of these puzzle pieces, but it was actually quite loose, bordering on <em>too</em> loose. I guess I really had to do a small test with some acrylic to see how the intended material would respond.</p>
<p>I adjusted the SVG to only contain three pieces so I could do a test in acrylic (without waisting too much acrylic). I found some nice 5mm thick milky white acrylic that I&rsquo;d want for my actual puzzle pieces. Through some tiny tests I found that using a speed of 10, ax power of 45% / min power of 10% was <em>just</em> enough to still cut the pieces from the acrylic.</p>
<p><figure style="flex-grow: 128; flex-basis: 308px">
		<a href="../final-project/pieces_acrylic_piece_test.jpg" data-size="500x389">
			
			<img src="../final-project/pieces_acrylic_piece_test.jpg"
				
				width="500"
				height="389"
				loading="lazy"
				alt="Three test pieces from 5mm acrylic">
		</a>
		
		<figcaption>Three test pieces from 5mm acrylic</figcaption>
		
	</figure></p>
<p>The resulting three pieces still had quite a lot of &ldquo;freedom&rdquo; to move around while connected. I didn&rsquo;t think it was <em>too</em> loose though. I just had to make sure that the strip of copper that would need to run along the bottom would use circles that were large enough to handle some &ldquo;freedom of movement&rdquo; of each piece. I really preferred to cut all the pieces as a whole, instead of separating out each piece (the latter option allowing me to take the <em>kerf</em> into account).</p>
<p>I also did some tiny <em>engraving</em> tests on the acrylic sheet to test for the spirograph I wanted to etch out of the puzzle pieces. Trying different speed, power and <em>dpi</em> tests until I had something I was happy with. I created a super simple PNG of a rectangle with rounded ends, to test both curves and straight lines.</p>
<p>I noticed that going up in DPI was resulting in a very rough surface along the engraving, while using a DPI that came down to the <em>kerf</em> of the laser (the width of the laser) of 149DPI created a quite smooth result. I eventually settled on using a speed of 80, max power of 15% / min power of 10%, and DPI of 149 for a result that <em>just</em> smoothly etched the top, without taking too much away.</p>
<p><figure style="flex-grow: 109; flex-basis: 262px">
		<a href="../final-project/pieces_engraving_tests.jpg" data-size="820x749">
			
			<img src="../final-project/pieces_engraving_tests.jpg"
				
				width="820"
				height="749"
				loading="lazy"
				alt="Keeping track of the different settings for each engraving test">
		</a>
		
		<figcaption>Keeping track of the different settings for each engraving test</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/pieces_engraving_test_zoom.jpg" data-size="820x608">
			
			<img src="../final-project/pieces_engraving_test_zoom.jpg"
				
				width="820"
				height="608"
				loading="lazy"
				alt="High DPI results in rougher engravings (left) than a DPI that&rsquo;s ±he size of the laser&rsquo;s diameter">
		</a>
		
		<figcaption>High DPI results in rougher engravings (left) than a DPI that’s ±he size of the laser’s diameter</figcaption>
		
	</figure></p>
<h3 id="copper-contact-bridges">Copper Contact Bridges</h3>
<p>I felt like I&rsquo;d done enough tests by now, and it was time to flesh out the puzzle pieces; to create both the spirograph engraving on top, and also the etching for the contact points that had to go on the bottom of each piece.</p>
<p>I loaded the SVG for the puzzle pieces into Fusion 360, but found that it was scaled much too big. I&rsquo;d had this issue before during the &ldquo;<a class="link" href="../blog/week-2/#fusion-360" >Computer-Aided Design</a>&rdquo; week. That week it wasn&rsquo;t too bad to downscale the image in Fusion 360 by eye. However, this time I wanted to make sure that the SVG was loaded without any rescaling having to be done.</p>
<p>Thankfully, after some searching I found <a class="link" href="https://forums.autodesk.com/t5/fusion-360-design-validate/import-svg-scale/td-p/5949937"  target="_blank" rel="noopener"
    >an answer</a> on the Autodesk forum that showed <em>exactly</em> what advanced settings to use for Affinity Designer! The tool that I&rsquo;d been using! Following those settings I saved a new SVG, imported it into Fusion 360 and it was scaled correctly.</p>
<p><figure style="flex-grow: 80; flex-basis: 192px">
		<a href="../final-project/pieces_affinity_settings.png" data-size="317x395">
			
			<img src="../final-project/pieces_affinity_settings.png"
				
				width="317"
				height="395"
				loading="lazy"
				alt="The precise &ldquo;advanced&rdquo; settings to use in Affinity Designer">
		</a>
		
		<figcaption>The precise “advanced” settings to use in Affinity Designer</figcaption>
		
	</figure></p>
<p>I started with the &ldquo;contact bridges&rdquo;, the copper strips that would close the connection from a pin on the microcontroller to ground in the puzzle plate. I&rsquo;d need to etch these shapes out of the <em>bottom</em> of the puzzle pieces so I&rsquo;d know exactly where to place the copper. You can read more about how I made those copper contact points in the bottom plate farther below.</p>
<p>I copied the sketch that contained all the contact points to a new one, removed all the &ldquo;third&rdquo; contact points that I added only for stability, but that were not connected to a wire. For the remaining 38 pairs of points I increased the size of the circles to 5mm. The contact points in the bottom plate are about 2mm in diameter. However, there is quite some movement possible of the puzzle pieces. I therefore did some rough tests with my three prototype puzzle pieces and felt that they moved about 5mm up and down max.</p>
<p>I connected each pair of contact points with a rectangle of 1mm width. However, that created a sharp angle between the 5mm circle and the rectangle. Henk had told me that fellow student Erwin had tried using the vinyl cutter to create a flexible PCB, but that he&rsquo;d had some issues where the blade pulled away the traces at the corners. I therefore wanted to make my bridges without any sharp angles.</p>
<p>Thankfully, there is a constraint in Fusion 360 that is called <em>Tangent</em> which positions two arced lines in such a way that they touch at the tangent, resulting in a smooth transition from one line to the next. Using a <em>3-Point arc</em> I would roughly pick a point along the outsides of the 5mm circle, and another along the rectangle. I&rsquo;d then use the <em>Tangent</em> constrain to place those to touch points at the perfect place along both the circle and rectangle.</p>
<p>Finally, I&rsquo;d mirror the line to the other side of the circle, and next to the circle at the other side of the bridge.</p>
<p><figure style="flex-grow: 114; flex-basis: 275px">
		<a href="../final-project/pieces_contact_bridge_design.png" data-size="811x707">
			
			<img src="../final-project/pieces_contact_bridge_design.png"
				
				width="811"
				height="707"
				loading="lazy"
				alt="Creating a smooth transition from the circle to the rectangle that connects each pair of circles">
		</a>
		
		<figcaption>Creating a smooth transition from the circle to the rectangle that connects each pair of circles</figcaption>
		
	</figure></p>
<p>Setting up all these lines, constraints and whatnot took ±3 minutes per bridge, thus with 38 of them I was busy for a while&hellip;</p>
<p>Afterwards I extruded all the contact bridges, projected those shapes back into a new sketch and exported it to a <code>.dxf</code> file. In Illustrator I then repositioned all of the contact points in rows so I&rsquo;d be wasting as little copper tape as possible during the cutting.</p>
<p><figure style="flex-grow: 172; flex-basis: 415px">
		<a href="../final-project/pieces_contact_bridge_rearrange.jpg" data-size="820x474">
			
			<img src="../final-project/pieces_contact_bridge_rearrange.jpg"
				
				width="820"
				height="474"
				loading="lazy"
				alt="Rearranging all the contact bridges into two rows to save space, using each piece&rsquo;s ID to define the order">
		</a>
		
		<figcaption>Rearranging all the contact bridges into two rows to save space, using each piece’s ID to define the order</figcaption>
		
	</figure></p>
<p>In the lab I saw that I could position three rows of contact points next to each other. I therefore rearranged the two rows into three, saved it as an SVG, and loaded it into <em>mods</em> to cut on the <em>Roland</em> vinyl cutter. I first did a test cut using <code>90g</code> (and 2 cm/s), which made a nice clean cut without going too deep.</p>
<p><figure style="flex-grow: 174; flex-basis: 419px">
		<a href="../final-project/pieces_contact_bridge_cut_copper.jpg" data-size="820x469">
			
			<img src="../final-project/pieces_contact_bridge_cut_copper.jpg"
				
				width="820"
				height="469"
				loading="lazy"
				alt="The vinyl cutter working on the 38 contact bridges">
		</a>
		
		<figcaption>The vinyl cutter working on the 38 contact bridges</figcaption>
		
	</figure></p>
<p>The cutting went perfectly. The blade did slightly carve into the copper in between some contact bridges because the copper tape bulges upward a little. However, it was only minor.</p>
<h3 id="spirograph-design">Spirograph Design</h3>
<p>I wanted to etch out a spirograph from the <em>front</em> of the pieces, to subtly act as the &ldquo;image&rdquo; that is usually found on almost every puzzle. I <em>really</em> like spirographs, and have often played with them while using my pen plotter. I&rsquo;ve created several JavaScript programs to randomly create spirographs for me, following certain rules. Such as the number of &ldquo;wheels&rdquo; to use (the ones most of us know as a child have two wheels).</p>
<p>I looked back at some of the spirographs I&rsquo;ve created in the past and felt that using 4 wheels would probably get me some interestingly complex spirographs that could be scaled well to ±30cm in diameter.</p>
<p>I set up my program and refreshed the page to see a grid of random spirographs. If I liked one, I could hover over it, and in the devTools console of the browser I could copy a piece of code that contained the settings for that spirograph. I then used those settings in a different script that I wrote to show just that spirograph, together with a hexagon and circle that represent the outline of the puzzle box.</p>
<p><figure style="flex-grow: 71; flex-basis: 172px">
		<a href="../final-project/pieces_spirograph_random_grid.jpg" data-size="500x697">
			
			<img src="../final-project/pieces_spirograph_random_grid.jpg"
				
				width="500"
				height="697"
				loading="lazy"
				alt="My program creates a grid of random spirographs, from which I can choose which I want to keep">
		</a>
		
		<figcaption>My program creates a grid of random spirographs, from which I can choose which I want to keep</figcaption>
		
	</figure></p>
<p>However, I noticed that I was almost only getting spirographs that were prime-symmetrical: 2, 3, 5, 7, 11, etc. petals. I couldn&rsquo;t find a single 6-fold symmetry spirograph. I&rsquo;d never noticed that before, but this time I really needed a 6-fold symmetry in my spirographs. Using <a class="link" href="http://www.eddaardvark.co.uk/python_patterns/spirograph.html"  target="_blank" rel="noopener"
    >this</a> page I refreshed my math on spirographs and how you can calculate the symmetry from the settings of each wheel.</p>
<p>I adjusted my code so it would keep going with randomly trying spirograph wheel settings until it had found a full grid of only 6-fold symmetric spirographs. I refreshed several dozen times, kept the ones that I thought looked interesting, and inspected how it looked when it was much bigger:</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_spirograph_1.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_spirograph_1.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_spirograph_2.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_spirograph_2.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_spirograph_3.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_spirograph_3.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_spirograph_4.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_spirograph_4.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_spirograph_5.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_spirograph_5.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_spirograph_6.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_spirograph_6.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p>I was looking for a spirograph that would (hopefully) cross over each puzzle piece, and that would subtly go outside of the hexagon to also etch into the wood. It was a hard choice, but I went for the bottom-right image from the six options above.</p>
<p>I downloaded the SVG, opened it up in Illustrator, together with my puzzle pieces, scaling its size and line thickness to something that I felt looked good.</p>
<p><figure style="flex-grow: 99; flex-basis: 239px">
		<a href="../final-project/pieces_spirograph_positioning.png" data-size="718x719">
			
			<img src="../final-project/pieces_spirograph_positioning.png"
				
				width="718"
				height="719"
				loading="lazy"
				alt="Finding a good scale and stroke thickness for the spirograph">
		</a>
		
		<figcaption>Finding a good scale and stroke thickness for the spirograph</figcaption>
		
	</figure></p>
<h3 id="laser-cutting">Laser Cutting</h3>
<p>You might&rsquo;ve realized that I wanted to use the laser to mark something on both the front and back of the puzzle pieces; the copper contact bridge placement on the back and engrave the spirograph design on the front. At first I had no idea how to do the alignment once I&rsquo;d flipped the puzzle pieces on their back. Then Henk had the great idea to also cut out a shape (square, hexagon) around the puzzle. If I taped the full acrylic sheet to the laser bed, I could simply flip the entire puzzle, plus the outside shape that was symmetrical, and place it back into the square/hexagonal hole. Brilliant!</p>
<p>Because I felt that the copper contact bridge location needed to be more precise w.r.t. the puzzle piece itself than the spirograph, I decided to first etch out those shapes while cutting out all the puzzle pieces, then rotate the puzzle and finally etch out the spirograph from the top.</p>
<p>Thankfully, I realized that this meant that I had to mirror the puzzle pieces and contact points! Since I&rsquo;d be cutting them &ldquo;from the bottom up&rdquo; in a way. I did this step in Illustrator, but later found that LightBurn also has a <em>reflect</em> option.</p>
<p><figure style="flex-grow: 138; flex-basis: 333px">
		<a href="../final-project/pieces_mirror_shapes.jpg" data-size="500x360">
			
			<img src="../final-project/pieces_mirror_shapes.jpg"
				
				width="500"
				height="360"
				loading="lazy"
				alt="Creating a reflection of the puzzle pieces and contact points">
		</a>
		
		<figcaption>Creating a reflection of the puzzle pieces and contact points</figcaption>
		
	</figure></p>
<p>I used the same milky white ±5mm thick acrylic sheet that I&rsquo;d used for the three prototype pieces before. Using duct tape I taped the top-left corner of the acrylic sheet. I did some tiny rectangle tests to check if I had to update the settings that seemed to go so perfect during the prototyping. I was surprised that I had to crank up the power to 50% / 55% instead of 45% to fully cut through the acrylic (speed of 10%, corner power of 10%).</p>
<p>While the laser cutter was working on my puzzle pieces I noticed something I was <em>not</em> happy with to say the least <span class="kaomoji">(°Д°)</span>
 I&rsquo;d taken these puzzle piece lines from the Fusion 360 file. However, Fusion had cut up many of the long lines into short segments, and the laser was randomly cutting these tiny strips. Although the laser cutter was precise, I knew this meant that you would be able to see tiny bumps at the points where each small line segment touched the next. I guess I should&rsquo;ve used the original SVG that I created in Affinity Designer.</p>
<p>However, it seemed that I would get a chance to fix that mistake, because when I peeled the puzzle from the plate it wasn&rsquo;t fully cut through along the bottom side. The full bottom half of the puzzle was still one piece! Strangely you could see that in the top-left corner the laser had been <em>much</em> too powerful, creating burn stains along the plastic cover. That was a distance of only ±10cm in which the laser went from too powerful, to not powerful enough <span class="kaomoji">✖_✖</span>
 That wasn&rsquo;t much reliability&hellip;</p>
<p><figure style="flex-grow: 110; flex-basis: 265px">
		<a href="../final-project/pieces_first_laser_cut_wrong.jpg" data-size="820x742">
			
			<img src="../final-project/pieces_first_laser_cut_wrong.jpg"
				
				width="820"
				height="742"
				loading="lazy"
				alt="The laser had been too powerful in the top-left, but the full bottom side was still one piece">
		</a>
		
		<figcaption>The laser had been too powerful in the top-left, but the full bottom side was still one piece</figcaption>
		
	</figure></p>
<p>I showed Henk and he started checking and fine-tuning the laser. He thought that the laser was partly pointing to the inside of the laser&rsquo;s head, because the head felt warm still. After some testing he told me to try again, and use even higher settings (speed of 10, max power of 70%, and a corner power to 20%).</p>
<p>In the meantime I took that original puzzle outline SVG from my laptop and loaded it into LightBurn, replacing the puzzle pieces from Fusion 360 (I used the Fusion 360 version to check the placement of the original outline).</p>
<p>I re-taped the acrylic sheet to the laser bed, and set-up for a second go. I noticed that the setting was too powerful due to the orange color appearing below the acrylic as the laser cut through the sheet. The benefit at least was that it had cut through at all lines.</p>
<p><figure style="flex-grow: 150; flex-basis: 361px">
		<a href="../final-project/pieces_taped_acrylic.jpg" data-size="500x332">
			
			<img src="../final-project/pieces_taped_acrylic.jpg"
				
				width="500"
				height="332"
				loading="lazy"
				alt="Taping the acrylic sheet to the laser bed">
		</a>
		
		<figcaption>Taping the acrylic sheet to the laser bed</figcaption>
		
	</figure> <figure style="flex-grow: 136; flex-basis: 326px">
		<a href="../final-project/pieces_laser_flipped.jpg" data-size="500x367">
			
			<img src="../final-project/pieces_laser_flipped.jpg"
				
				width="500"
				height="367"
				loading="lazy"
				alt="Having flipped the cut shapes back into the shape">
		</a>
		
		<figcaption>Having flipped the cut shapes back into the shape</figcaption>
		
	</figure></p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='pieces_laser_cutting.mp4' type="video/mp4"></video>
     
    
    <figcaption>Timelapse of cutting the puzzle pieces</figcaption>
    
</figure>
<p>I took the puzzle out of the hexagon shape, flipped it around (revealing the severe burn marks on the plastic), reassembled the full puzzle and pressed it back into the hexagon on the sheet.</p>
<p>I took a cropped version of the spirograph PNG (so I wouldn&rsquo;t engrave too far outside of the actual puzzle and thus ruin more acrylic). Setting the machine at using a speed of 75, with a max power of 15% and 149 DPI.</p>
<p><figure style="flex-grow: 157; flex-basis: 377px">
		<a href="../final-project/pieces_lightburn_settings.jpg" data-size="820x522">
			
			<img src="../final-project/pieces_lightburn_settings.jpg"
				
				width="820"
				height="522"
				loading="lazy"
				alt="The settings of all the tests and puzzle parts in LightBurn">
		</a>
		
		<figcaption>The settings of all the tests and puzzle parts in LightBurn</figcaption>
		
	</figure></p>
<p>I hadn&rsquo;t done any large engraving before, and didn&rsquo;t realize <em>how slow</em> it is! I think it was about an hour before it had fully engraved the spirograph. I did stop the engraving after about 10 minutes. I was afraid that the engraving wasn&rsquo;t going through the paper cover, because the (burned) plastic cover wasn&rsquo;t being removed by the engraving. It was a bit of a hassle to try and remove one piece while not  moving the plate. Thankfully, once I had a piece I saw that the engraving was leaving a nice effect. Although I did notice that the blue parts of the plastic were resulting in somewhat blue-ish engravings. Hopefully I could wash it off later.</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='pieces_engraving_spirograph.mp4' type="video/mp4"></video>
     
    
    <figcaption>While engraving the spirograph</figcaption>
    
</figure>
<p><figure style="flex-grow: 89; flex-basis: 215px">
		<a href="../final-project/pieces_engraving.jpg" data-size="820x915">
			
			<img src="../final-project/pieces_engraving.jpg"
				
				width="820"
				height="915"
				loading="lazy"
				alt="After the spirograph was engraved into the pieces">
		</a>
		
		<figcaption>After the spirograph was engraved into the pieces</figcaption>
		
	</figure></p>
<h4 id="cleaning-the-pieces">Cleaning the Pieces</h4>
<p>With the front and back of the pieces done, they had to be cleaned and gosh, that <em>wasn&rsquo;t</em> easy! Due to the engraving, the plastic cover was sort-of stuck to the acrylic. I had to scratch and peel along the entire engraving. I slowly ground down two nails while peeling the 38 pieces! (I also filed the sharp edges of the acrylic a bit)</p>
<p>I noticed that the pieces seemed a little darker along the edge parts that were engraved. Since I had some time to think while doing all the cleaning I realized that if I <em>theoretically</em> would do it again, I&rsquo;d do it quite differently: <strong>I&rsquo;d first do the engraving, on the white plastic sheet&rsquo;s side. Next I would cut out the puzzle pieces. I&rsquo;d then flip around the puzzle pieces and finally etch the copper bridge outline on the back</strong>. That way the engraving wouldn&rsquo;t mess with the sides of the already cut pieces. Furthermore, I saw that the puzzle fitted quite snugly when I flipped it, so I wasn&rsquo;t that afraid that the copper contacts would be etched too far off.</p>
<p><figure style="flex-grow: 156; flex-basis: 375px">
		<a href="../final-project/pieces_cleaning.jpg" data-size="820x524">
			
			<img src="../final-project/pieces_cleaning.jpg"
				
				width="820"
				height="524"
				loading="lazy"
				alt="Cleaning the pieces">
		</a>
		
		<figcaption>Cleaning the pieces</figcaption>
		
	</figure> <figure style="flex-grow: 127; flex-basis: 306px">
		<a href="../final-project/pieces_lost_nails.jpg" data-size="500x391">
			
			<img src="../final-project/pieces_lost_nails.jpg"
				
				width="500"
				height="391"
				loading="lazy"
				alt="I lost two nails from all the peeling">
		</a>
		
		<figcaption>I lost two nails from all the peeling</figcaption>
		
	</figure></p>
<p>After cleaning all pieces two hours later I finally assembled the full puzzle for the first time. However, as I was assembling the pieces I noticed that the areas around the edges of each puzzle piece looked awful; they had a big brown-yellow color to them <span class="kaomoji">(╥﹏╥)</span>
</p>
<p>I couldn&rsquo;t quite capture it in a photo, but I tried:</p>
<p><figure style="flex-grow: 131; flex-basis: 315px">
		<a href="../final-project/pieces_cut_brown_cast.jpg" data-size="820x624">
			
			<img src="../final-project/pieces_cut_brown_cast.jpg"
				
				width="820"
				height="624"
				loading="lazy"
				alt="After cleaning the pieces showed a clear brown-yellow cast along all the lines">
		</a>
		
		<figcaption>After cleaning the pieces showed a clear brown-yellow cast along all the lines</figcaption>
		
	</figure></p>
<p>When you picked up a piece you couldn&rsquo;t see any brown cast. However, once it was placed back in the whole puzzle, the brown cast was very apparent. Henk grabbed some cotton tips and acetone and we tried two edges (on the puzzle pieces that went wrong), and there did seem to be some improvement.</p>
<p>The next morning I took some cotton tips and old socks, put on some gloves and respirator and carefully cleaned each puzzle piece with acetone. I used a sock for the outsides and &ldquo;outer&rdquo; puzzle ears, while using cotton tips to clean inside any &ldquo;inner&rdquo; puzzle ear/pocket (and cleaning in water afterwards).</p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/pieces_cleaning_acetone.jpg" data-size="500x371">
			
			<img src="../final-project/pieces_cleaning_acetone.jpg"
				
				width="500"
				height="371"
				loading="lazy"
				alt="The second phase of the cleaning while using acetone">
		</a>
		
		<figcaption>The second phase of the cleaning while using acetone</figcaption>
		
	</figure></p>
<p>Another two hours and dry eyes later and the worst of the brown cast was gone, although it wasn&rsquo;t <em>totally</em> gone. Again, I can&rsquo;t quite capture it right with my camera, but here is how it looked after the second cleaning phase:</p>
<p><figure style="flex-grow: 119; flex-basis: 286px">
		<a href="../final-project/pieces_cut_after_acetone.jpg" data-size="820x686">
			
			<img src="../final-project/pieces_cut_after_acetone.jpg"
				
				width="820"
				height="686"
				loading="lazy"
				alt="The brown cast along the edges was reduced, but not all gone after cleaning with acetone">
		</a>
		
		<figcaption>The brown cast along the edges was reduced, but not all gone after cleaning with acetone</figcaption>
		
	</figure></p>
<p>I figured that I couldn&rsquo;t really do anything about the darker cast that was remaining along the puzzle edges using cleaning. I should probably use the NeoPixels instead; I initially though that you&rsquo;d only see the light show when a new puzzle piece was placed, but now <strong>I&rsquo;d have the light always one beneath the pieces already placed, but when a new pieces was placed, you&rsquo;d get a bit of a show</strong>.</p>
<p>I grabbed the copper bridges and used the (very) light etched copper outlines on the back of each piece to stick them on in (hopefully) the right place.</p>
<p><figure style="flex-grow: 78; flex-basis: 189px">
		<a href="../final-project/pieces_contact_bridge_placed.jpg" data-size="500x633">
			
			<img src="../final-project/pieces_contact_bridge_placed.jpg"
				
				width="500"
				height="633"
				loading="lazy"
				alt="The hardly visible etch of the copper bridge on the front piece and a copper bridge placed onto the back piece">
		</a>
		
		<figcaption>The hardly visible etch of the copper bridge on the front piece and a copper bridge placed onto the back piece</figcaption>
		
	</figure></p>
<p>I suddenly realized that I&rsquo;d made a stupid mistake. The center puzzle piece is a hexagon. It can thus be placed in 6 different orientations. however, only <em>one</em> of those would result in the copper bridge being placed correctly <span class="kaomoji">✖‿✖</span>
</p>
<p>I figured that I should redesign the copper bridge for that piece. However, I didn&rsquo;t want to create a bridge that was too big (in surface area) because it would block too much light. I therefore created a triangle instead. That way the puzzle piece would still create a contact in 50% of the orientations <span class="kaomoji">(*^▽^*)ゞ</span>
</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_hexagon_copper_bridge.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_hexagon_copper_bridge.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt="The updated copper contact bridge">
		</a>
		
		<figcaption>The updated copper contact bridge</figcaption>
		
	</figure></p>
<p>I took the pieces home and assembled them on the bottom puzzle plate (at this point I&rsquo;d already assembled the bottom plates, which you can read about in later sections):</p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/pieces_fully_assembled_on_plate.jpg" data-size="820x609">
			
			<img src="../final-project/pieces_fully_assembled_on_plate.jpg"
				
				width="820"
				height="609"
				loading="lazy"
				alt="The puzzle assembled on the bottom plate that have all the contact points in it">
		</a>
		
		<figcaption>The puzzle assembled on the bottom plate that have all the contact points in it</figcaption>
		
	</figure></p>
<h3 id="the-bag">The Bag</h3>
<p>I wanted to store the puzzle pieces in a nice black bag. I have zero sewing skills, so this wasn&rsquo;t something I would make myself. After some searching online I was able to find a black velvet bag of 18x24cm, which I guessed would be big enough to hold all 38 pieces.</p>
<p>Since I had to buy at least 5 bags, I figured I could do some tests and see if I could burn a hexagon and spirograph design into it.</p>
<p>I stuck some paper to the bottom of the laser cutter and had it mark a rectangle that was the size of the bag, so I would know exactly where to place the bag.</p>
<p>I couldn&rsquo;t let the laser go <em>too</em> fast, because then it becomes too inaccurate in doing curves (for the spirograph shape). Eventually I settled on using a speed of 100, max and min power of 10% (because lower isn&rsquo;t possible), and use the <em>Perforation Mode</em> of 3mm cut with a 1mm dash. The perforation trick I learned from my Wildcard week, working with paper and origami, makes a real difference to make sure that places with cuts don&rsquo;t tear any further.</p>
<p>You can barely see the result, but I&rsquo;m happy that I did add a little personal touch to the bag.</p>
<p><figure style="flex-grow: 80; flex-basis: 192px">
		<a href="../final-project/pieces_bag_laser_cut.jpg" data-size="500x624">
			
			<img src="../final-project/pieces_bag_laser_cut.jpg"
				
				width="500"
				height="624"
				loading="lazy"
				alt="Laser cutting the spirograph and hexagon design into the bag">
		</a>
		
		<figcaption>Laser cutting the spirograph and hexagon design into the bag</figcaption>
		
	</figure></p>
<h2 id="the-pcbs">The PCBs</h2>
<p>Due to the large number of puzzle pieces, where each needs to be connected to its own pin from a microcontroller, I had to use <em>multiplexers</em> to increase the number of GPIO pins.</p>
<p>Thankfully, there were <em>PCA9555D 16-bit I2C-bus and SMBus I/O port</em> devices at the lab. The <a class="link" href="https://www.nxp.com/part/PCA9555D#/"  target="_blank" rel="noopener"
    >PCA9555D</a> uses I2C and gives you access to 16 more GPIO pins, which can be set as both <em>input</em> and <em>output</em>.</p>
<p><figure style="flex-grow: 101; flex-basis: 243px">
		<a href="../final-project/pcb_pca9555d_pinout.png" data-size="397x391">
			
			<img src="../final-project/pcb_pca9555d_pinout.png"
				
				width="397"
				height="391"
				loading="lazy"
				alt="The pinout of the PCA9555D">
		</a>
		
		<figcaption>The pinout of the PCA9555D</figcaption>
		
	</figure></p>
<p>Once I figured out that the puzzle would have 38 puzzle pieces, I started to design the PCB for my final project using two PCA9555Ds to get 32 GPIO pins and a central <a class="link" href="https://github.com/SpenceKonde/megaTinyCore/blob/master/megaavr/extras/ATtiny_x16.md"  target="_blank" rel="noopener"
    >ATtiny3216</a>, using 6 more of its pins to detect puzzle pieces.</p>
<p><figure style="flex-grow: 199; flex-basis: 478px">
		<a href="../final-project/pcb_attiny3216_pinout_arduino.gif" data-size="1905x955">
			
			<img src="../final-project/pcb_attiny3216_pinout_arduino.gif"
				
				width="1905"
				height="955"
				loading="lazy"
				alt="The Arduino pinout for the ATtiny3216 | From megaTinyCore">
		</a>
		
		<figcaption>The Arduino pinout for the ATtiny3216 | From megaTinyCore</figcaption>
		
	</figure></p>
<p>I created my schematic in KiCad, making sure to pay attention to which connections needed pullup resistors, such as the <em>SDA</em> and <em>SCL</em> lines of the I2C connection, but also the <em>INT</em> pins of the two PCA9555Ds, and finally, to make sure that each PCA9555D had its own address by using the three <em>A</em> pins and setting them all to <em>GND</em> for one pin, resulting in a <code>0x20</code> address, and setting <em>A0</em> to <em>5V</em> on the other PCA9555D, resulting in a <code>0x21</code> address.</p>
<p>Below you can see the final schematic from KiCad. I&rsquo;ve highlighted some of the major areas (outside of the ATtiny3216 in the upper-left).</p>
<p><figure style="flex-grow: 129; flex-basis: 310px">
		<a href="../final-project/pcb_kicad_schematic.jpg" data-size="1000x773">
			
			<img src="../final-project/pcb_kicad_schematic.jpg"
				
				width="1000"
				height="773"
				loading="lazy"
				alt="The final schematic from KiCad">
		</a>
		
		<figcaption>The final schematic from KiCad</figcaption>
		
	</figure></p>
<p>Below is a table with the components used:</p>
<table>
<thead>
<tr>
<th>Component</th>
<th>Full Label in KiCad</th>
<th>Reference</th>
<th>Specific Orientation</th>
</tr>
</thead>
<tbody>
<tr>
<td>ATtiny3216</td>
<td>Microcontroller_ATtiny3216-SFR</td>
<td>U1</td>
<td>Yes - Dot in one corner</td>
</tr>
<tr>
<td>2x PCAA9555D I2C GPIO expander</td>
<td>PCAA9555D</td>
<td>U2 &amp; U3</td>
<td>Yes - Dot in one corner</td>
</tr>
<tr>
<td>1x 01x03 Female connector</td>
<td>Conn_01x03_Male (I couldn&rsquo;t find a female symbol in the <em>fab</em> library)</td>
<td>J10</td>
<td>Yes</td>
</tr>
<tr>
<td>8x 01x04 Male connector</td>
<td>Conn_01x04_Male</td>
<td>J3, J4, J5, J8, J13, J14, J15, J16</td>
<td>Yes</td>
</tr>
<tr>
<td>4x 01x05 Male connector</td>
<td>Conn_01x05_Male</td>
<td>J1, J2, J9, J12</td>
<td>Yes</td>
</tr>
<tr>
<td>1x 01x06 Male connector</td>
<td>Conn_01x06_Male</td>
<td>J11</td>
<td>Yes</td>
</tr>
<tr>
<td>UPDI</td>
<td>Conn_UPDI_01x02_Male</td>
<td>J6</td>
<td>Yes</td>
</tr>
<tr>
<td>FTDI</td>
<td>Conn_FTDI_01x06_Male</td>
<td>J7</td>
<td>Yes</td>
</tr>
<tr>
<td>Capacitor 1μF</td>
<td>C_1206</td>
<td>C1</td>
<td>No</td>
</tr>
<tr>
<td>3x LED - various colors</td>
<td>LED_1206</td>
<td>D1 - D3</td>
<td>Yes - Green marking on top pointing to <em>cathode</em></td>
</tr>
<tr>
<td>11x Resistors - various values</td>
<td>R_1206</td>
<td>R1 - R11</td>
<td>No</td>
</tr>
</tbody>
</table>
<p>With 38 connectors for the puzzle pieces, 5 for the FTDI, 2 for the UPDI, 1 for the NeoPixel grid of LEDs and 2 more for <em>5V</em> and <em>GND</em> (just to be sure), I needed 48 connections going outward! That required quite some space, and I ended up splitting up all the components across three separate boards; one main one with the ATtiny3216, and one for each PCA9555D and its components and connectors:</p>
<p><figure style="flex-grow: 226; flex-basis: 543px">
		<a href="../final-project/pcb_layout.png" data-size="2213x978">
			
			<img src="../final-project/pcb_layout.png"
				
				width="2213"
				height="978"
				loading="lazy"
				alt="Final PCB layout in KiCad">
		</a>
		
		<figcaption>Final PCB layout in KiCad</figcaption>
		
	</figure></p>
<p>Hexagonal shaped of course <span class="kaomoji">(⌐■_■)</span>
</p>
<p>The milling and soldering of the boards went without any major issues. Except that I made a mistake for my second PCA9555D board in terms of the available height left on the copper plate, and ended up with one missing corner because the copper plate <em>just</em> wasn&rsquo;t big enough <span class="kaomoji">ಥ﹏ಥ</span>
</p>
<p>I used jumper wires to connect the two PCA9555D boards back to the main board. Shortening them and then trying to braid them together to reduce any &ldquo;wire mess&rdquo;</p>
<p><figure style="flex-grow: 170; flex-basis: 408px">
		<a href="../final-project/pcb_boards_connected.jpg" data-size="820x482">
			
			<img src="../final-project/pcb_boards_connected.jpg"
				
				width="820"
				height="482"
				loading="lazy"
				alt="Connecting the three boards together with shortened (and braided) wires">
		</a>
		
		<figcaption>Connecting the three boards together with shortened (and braided) wires</figcaption>
		
	</figure></p>
<p>Once I finished the <em>NeoPixel</em> plate, which you can read about in the next section, I put some double sided tape on the backs of the three boards and stuck them to the back of the NeoPixel plate.</p>
<p>To easily create a &ldquo;common ground&rdquo; area for the many <em>GND</em> wires coming from the puzzle piece plate I added strips of copper tape in between the boards.</p>
<p><figure style="flex-grow: 87; flex-basis: 210px">
		<a href="../final-project/pcb_stuck_to_neopixel_plate.jpg" data-size="500x570">
			
			<img src="../final-project/pcb_stuck_to_neopixel_plate.jpg"
				
				width="500"
				height="570"
				loading="lazy"
				alt="Having stuck the three PCBs to the back of the NeoPixel acrylic plate">
		</a>
		
		<figcaption>Having stuck the three PCBs to the back of the NeoPixel acrylic plate</figcaption>
		
	</figure></p>
<p><em>You can read more details about the design and creation of my PCBs in my <a class="link" href="../blog/week-14/#designing-my-board" >Networking &amp; Communications</a> blog.</em></p>
<h2 id="the-neopixel-grid">The NeoPixel Grid</h2>
<p>For the &ldquo;light show&rdquo; of my project I needed a grid with LEDs that I could control separately. To do this, <em>NeoPixels</em> seemed like a great approach, and Henk got me a 5 meter long LED strip of NeoPixels, specifically the <a class="link" href="https://cdn-shop.adafruit.com/datasheets/WS2812.pdf"  target="_blank" rel="noopener"
    ><em>WS2812E</em></a>. These are RGB LEDs where each &ldquo;pixel&rdquo; has its own <em>driver chip</em> to control its color and brightness (with PWM). They therefore <strong>only require <em>one</em> data line connection</strong> to a microcontroller to be able to control meters long of NeoPixels (your microcontroller does need to have enough SRAM to hold the information for each pixel though, needing 3 bytes per pixel). Furthermore, you can <strong>cut a strip of NeoPixels <em>after each pixel</em></strong>, making it possible to create intricate grids of pixels.</p>
<p>The packaging said that this 5 meter long strip was 90W! Although whichever way I tried, I could never get the NeoPixels to draw more than ±6-7A even at full white + brightness (at 5V that&rsquo;s <code>5 * 7 = 35W</code> max). However, that still meant that I&rsquo;d have to power the NeoPixels from a separate adapter, not directly from a PCB.</p>
<p>The NeoPixel strip is 10mm wide and with 60 LEDs per meter, the LEDs were 16.67mm apart. It needs three connections: <em>5V</em>, <em>GND</em> and a <em>DATA</em> line, the latter of which is used to program the strip.</p>
<p><figure style="flex-grow: 220; flex-basis: 529px">
		<a href="../final-project/grid_neopixels.jpg" data-size="820x372">
			
			<img src="../final-project/grid_neopixels.jpg"
				
				width="820"
				height="372"
				loading="lazy"
				alt="The NeoPixel strip has a 5V (red), DATA (green) and GND (white) connection">
		</a>
		
		<figcaption>The NeoPixel strip has a 5V (red), DATA (green) and GND (white) connection</figcaption>
		
	</figure></p>
<p>There is an <a class="link" href="https://learn.adafruit.com/adafruit-neopixel-uberguide"  target="_blank" rel="noopener"
    >Uberguide to NeoPixels</a> on the Adafruit website, and a <a class="link" href="https://learn.adafruit.com/adafruit-neopixel-uberguide/best-practices"  target="_blank" rel="noopener"
    >Best Practices</a>. The most important notes for my final project (I think) are:</p>
<ul>
<li>Add a 1000μF, 6.3 V or higher capacitor to the <em>5V</em> and <em>GND</em> of the power supply terminals to prevent the initial onrush of current from damaging the pixels.</li>
<li>Add a 300 - 500Ω resistor between the microcontroller&rsquo;s data output pin and the input of the first NeoPixel. The resistor should be at the end of the wire closest to the NeoPixel(s), not the microcontroller.</li>
<li>NeoPixels powered by 5V require a 5V data signal.</li>
<li>If your microcontroller and NeoPixels are powered from two different sources, there must be a ground connection between the two.</li>
</ul>
<p>I had to convert the 5 meter long strip into a <em>grid</em> to be placed below the entire puzzle bottom. I wanted to lay it out as a <em>hexagonal</em> grid; with a hexagonal grid each NeoPixel will be <em>exactly</em> the same distance from all six of its neighbors. It therefore has the most even spreading of the light.</p>
<p>I went to <em>the</em> <a class="link" href="https://www.redblobgames.com/grids/hexagons/#coordinates"  target="_blank" rel="noopener"
    >&ldquo;guide of hexagon coordinates&rdquo;</a> to help me with my math. I realized that a <em>pointy topped</em> grid wouldn&rsquo;t work with the NeoPixels, since two strips would then have the be placed closer together than the width of one strip. The <em>flat topped</em> grid version was a good match though, where each strip had to be placed 14.43mm apart, thus leaving 4.43mm in between each strip.</p>
<p>I drew the design of the grid and NeoPixel plate in Fusion 360. At the end I counted the number of NeoPixels this would total too and was surprised that the grid contained a whopping 217 NeoPixels, or 3.6meters of NeoPixel! <span class="kaomoji">(⊙.⊙)</span>
 I guess I wouldn&rsquo;t have too little light.</p>
<p><figure style="flex-grow: 97; flex-basis: 234px">
		<a href="../final-project/grid_math.jpg" data-size="500x512">
			
			<img src="../final-project/grid_math.jpg"
				
				width="500"
				height="512"
				loading="lazy"
				alt="Trying to figure out the math of the hexagonal grid">
		</a>
		
		<figcaption>Trying to figure out the math of the hexagonal grid</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/grid_fusion_design.png" data-size="729x729">
			
			<img src="../final-project/grid_fusion_design.png"
				
				width="729"
				height="729"
				loading="lazy"
				alt="The design of the NeoPixel grid in Fusion 360">
		</a>
		
		<figcaption>The design of the NeoPixel grid in Fusion 360</figcaption>
		
	</figure></p>
<p>I first made a cardboard prototype, and when that all looked good I had the NeoPixel plate cut from white acrylic. I first <em>etched</em> a thin line for the positions of each NeoPixel strip, to help me with the placement, after which I cut out all the holes. The holes along the internal sections are meant for the wires coming down from the contact points in the plate that forms the bottom of the puzzle (I go into this in the next section).</p>
<p>I cut the NeoPixel string into smaller strips for each column of the grid. Next came the arduous process of soldering wires to each separate strip so I could connect each back to a &ldquo;main <em>5V</em>&rdquo; line, and a &ldquo;main <em>GND</em>&rdquo; line, and finally connect all the <em>DATA</em> points together again.</p>
<p>It took me about 8 hours on one day, slowly stripping wires, soldering them to the strips, joining the wires together again, etc. etc. Below you can see a timelapse of the board slowly coming together.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/grid_build_up_timelapse.gif" data-size="500x500">
			
			<img src="../final-project/grid_build_up_timelapse.gif"
				
				width="500"
				height="500"
				loading="lazy"
				alt="A &ldquo;timelapse&rdquo; of the creation of the NeoPixel grid">
		</a>
		
		<figcaption>A “timelapse” of the creation of the NeoPixel grid</figcaption>
		
	</figure></p>
<p>What was nerve-wracking from the moment I made the first cut of the strip in the morning, is that I truly wasn&rsquo;t sure if I&rsquo;d done all the reconnecting correctly again <em>until</em> it was all soldered and I hooked it up to an adapter <span class="kaomoji">⊙﹏⊙</span>
</p>
<p>I had shaky hands from the nerves when I plugged the adapter into the power&hellip;</p>
<p>But the full grid turned on! <span class="kaomoji">(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧</span>
</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/grid_rainbow_works.jpg" data-size="820x820">
			
			<img src="../final-project/grid_rainbow_works.jpg"
				
				width="820"
				height="820"
				loading="lazy"
				alt="The NeoPixels all still worked!">
		</a>
		
		<figcaption>The NeoPixels all still worked!</figcaption>
		
	</figure></p>
<p>Now came the hard task of <strong>creating light patterns within this hexagonal <em>grid</em>, when the LEDs on the NeoPixel were all connected in one long <em>string</em></strong>. I looked through the <a class="link" href="https://www.redblobgames.com/grids/hexagons/#coordinates-cube"  target="_blank" rel="noopener"
    >hexagon guide</a> again and decided that going for the <em>cube coordinate</em> version would make most sense, and make calculations easiest.</p>
<p>I recreated my hexagon grid in <em>Affinity Designer</em> and manually typed in the coordinates that I&rsquo;d need to go from a <em>string of pixels</em> to a <em>grid of pixels</em>. For example, NeoPixel <code>163</code> would be grid coordinate <code>(4,3,-7)</code>:</p>
<p><figure style="flex-grow: 89; flex-basis: 213px">
		<a href="../final-project/grid_coordinates_mapping.jpg" data-size="1000x1122">
			
			<img src="../final-project/grid_coordinates_mapping.jpg"
				
				width="1000"
				height="1122"
				loading="lazy"
				alt="Meticulously making a mapping from NeoPixel index to grid coordinates">
		</a>
		
		<figcaption>Meticulously making a mapping from NeoPixel index to grid coordinates</figcaption>
		
	</figure></p>
<p>I converted that mapping to variables in my code so I could map between an <code>x</code>, <code>y</code> and <code>z</code> position and get back the <code>index</code> of the NeoPixel that should do something.</p>
<p>It still took some effort to convert the math and JavaScript example of working with a <em>cube coordinate</em> grid back to an array of NeoPixel indices, but eventually I had a small ring of light showing on the grid:</p>
<p><figure style="flex-grow: 93; flex-basis: 225px">
		<a href="../final-project/grid_small_ring.jpg" data-size="574x611">
			
			<img src="../final-project/grid_small_ring.jpg"
				
				width="574"
				height="611"
				loading="lazy"
				alt="Having a small ring of lights on">
		</a>
		
		<figcaption>Having a small ring of lights on</figcaption>
		
	</figure> <figure style="flex-grow: 91; flex-basis: 219px">
		<a href="../final-project/grid_big_ring_weirdness.jpg" data-size="500x546">
			
			<img src="../final-project/grid_big_ring_weirdness.jpg"
				
				width="500"
				height="546"
				loading="lazy"
				alt="At bigger radii some NeoPixels just did whatever they wanted">
		</a>
		
		<figcaption>At bigger radii some NeoPixels just did whatever they wanted</figcaption>
		
	</figure></p>
<p>Strangely, when I increased the ring to 7 grid points, some of the final NeoPixels started to behave incredibly odd, having a mind of their own. I was stuck on this for <em>hours</em>, trying different things to understand what the underlying reason was, not getting any close to understanding or finding a pattern.</p>
<p>Thankfully, fellow student Erwin told me that it could be an <em>overflow of the dynamic memory</em>, because it only affected the end of the NeoPixel string. That the program was trying to address &ldquo;memory&rdquo; after the official dynamic memory (the <em>SRAM</em> I believe), which would result in nonsense values. Well, that was something I&rsquo;d never experienced before in my daily work coding in R or JavaScript <span class="kaomoji">(●__●)</span>
</p>
<p>At this time I&rsquo;d actually been using an Arduino to program the NeoPixels, because the uploading went so much faster than with the ATtiny&rsquo;s. When I switched to my ATtiny3216 board, just to test, it all looked fine, no weird NeoPixels!</p>
<p>I added some color and made some funky, overly vibrant rainbow displays once I finally had my full grid of NeoPixels working properly <span class="kaomoji">(⌐■_■)</span>
</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/grid_rainbow_randomness_square.jpg" data-size="500x500">
			
			<img src="../final-project/grid_rainbow_randomness_square.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 141; flex-basis: 339px">
		<a href="../final-project/grid_rainbow_randomness_zoom.jpg" data-size="820x580">
			
			<img src="../final-project/grid_rainbow_randomness_zoom.jpg"
				
				width="820"
				height="580"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p><em>You can read a much more detailed explanation about the design, creation, and first programming of my NeoPixel grid in my <a class="link" href="../blog/week-13/#creating-my-neopixel-grid" >Output Devices</a> blog.</em></p>
<h2 id="the-contact-plate">The Contact Plate</h2>
<p>To figure out how to create the contact points on the bottom of the puzzle, which would connect back to the microcontroller below the NeoPixel plate, I tried several things.</p>
<h3 id="contact-point-prototypes">Contact Point Prototypes</h3>
<p>I started by milling two tiny 5mm circles from a general copper plate, used for making PCBs, with a hole in the center (to solder a wire to). However, I didn&rsquo;t like the look of the circles, they weren&rsquo;t perfectly round, and they felt kind of big, especially when needing 76 of them (twice the number of puzzle pieces). I was also very wary of the fact that I had to <em>etch</em> out a section of the acrylic that had the be very exact and to an exact depth, so the copper would not fall in too deep or stick out too much.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/pieces_first_test_copper_circles.jpg" data-size="350x350">
			
			<img src="../final-project/pieces_first_test_copper_circles.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt="Copper plate">
		</a>
		
		<figcaption>Copper plate</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_wires_glued.jpg" data-size="500x500">
			
			<img src="../final-project/contact_wires_glued.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Stripped wires glued in holes">
		</a>
		
		<figcaption>Stripped wires glued in holes</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_rivet_test.jpg" data-size="500x500">
			
			<img src="../final-project/contact_rivet_test.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Rivets with wires soldered at the ends">
		</a>
		
		<figcaption>Rivets with wires soldered at the ends</figcaption>
		
	</figure></p>
<p>As a second test I made tiny, tiny holes in a small piece of acrylic and glued stripped wires into them of different thicknesses and materials (middle image above). These tiny points sticking from the top worked as contact points. However, the glue made a bit of a mess on the bottom side, and the points at the top didn&rsquo;t look <em>that</em> nice, those clipped points.</p>
<p>Finally, Henk suggested to use <em>copper rivets</em> instead. These are generally used to create <em>vias</em> for double sided copper plates. I did a small test with the smallest acrylic plate at the lab (about 1.8mm), which was sadly still too thick to be able to flatten the other side with a rivet tool. Nevertheless, I did manage to solder stripped wires to the other side of the rivets to use them as contact points (right-most image above).</p>
<p>The rivets seemed like a good option. They looked nice, had only the tiniest of bump on top of the acrylic, and they were all exactly the same thickness above the acrylic. With two rivets there was still a little wobble when I placed a puzzle piece on top. I therefore decided that I&rsquo;d need <em>three</em> rivets per puzzle piece, one of which wouldn&rsquo;t have a wire running to it, but only there to create the balance.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_rivets.jpg" data-size="500x500">
			
			<img src="../final-project/contact_rivets.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The tiny copper rivets at 0.6mm, 0.8mm & 1.0mm">
		</a>
		
		<figcaption>The tiny copper rivets at 0.6mm, 0.8mm &amp; 1.0mm</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_three_point_rivet_test.jpg" data-size="500x500">
			
			<img src="../final-project/contact_three_point_rivet_test.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Using three rivets (here at 0.8 and 1mm) to be able to balance the puzzle piece on top">
		</a>
		
		<figcaption>Using three rivets (here at 0.8 and 1mm) to be able to balance the puzzle piece on top</figcaption>
		
	</figure></p>
<p>I learned that I couldn&rsquo;t solder a wire to a rivet in a thicker acrylic plate (±3mm) which I wanted to use for the bottom plate. I therefore had to create the rivet+wire combination in some other way and then string them through a hole in the bottom of the puzzle plate. That meant that I had to use the 1mm rivet, which had a hole of 1.5mm diameter, because the jumper wires wouldn&rsquo;t fit through smaller holes.</p>
<p>Doing a small test with the 1mm rivets soldered to wires, showed that the contact points worked well when a &ldquo;dummy&rdquo; copper strip was placed on top to act as the switch closing.</p>
<p><figure style="flex-grow: 147; flex-basis: 354px">
		<a href="../final-project/contact_connection_test.jpg" data-size="820x555">
			
			<img src="../final-project/contact_connection_test.jpg"
				
				width="820"
				height="555"
				loading="lazy"
				alt="The set-up for a test of the rivet contact points (imagine a puzzle piece being placed on top of the white plate eventually)">
		</a>
		
		<figcaption>The set-up for a test of the rivet contact points (imagine a puzzle piece being placed on top of the white plate eventually)</figcaption>
		
	</figure></p>
<p><em>You can read much more details about the prototypes I created and tested for the contact points in my puzzle bottom plate in my <a class="link" href="../blog/week-14/#puzzle-contact-points" >Networking &amp; Communications</a> blog.</em></p>
<h3 id="creating-the-contact-plate">Creating the Contact Plate</h3>
<p>Knowing that I wanted to use the rivets as the contact points in the bottom puzzle plate, I created a new sketch in Fusion 360 to design the bottom plate, using a hexagon of the same size as the NeoPixel plate.</p>
<p>With the sketch that contained the puzzle pieces visible I added 114 tiny holes for the rivets. I tried to position them so they&rsquo;d hopefully keep a puzzle piece in balance; a triangle with the center of gravity contained somewhere within.</p>
<p>In another new sketch I drew a straight line between two of the three rivet holes per puzzle piece. I would etch that line within the acrylic to mark which two holes should be connected; one going to ground and the other to a microcontroller pin.</p>
<p><figure style="flex-grow: 89; flex-basis: 214px">
		<a href="../final-project/contact_plate_design.png" data-size="1038x1162">
			
			<img src="../final-project/contact_plate_design.png"
				
				width="1038"
				height="1162"
				loading="lazy"
				alt="The design for the bottom plate of the puzzle with all the contact points">
		</a>
		
		<figcaption>The design for the bottom plate of the puzzle with all the contact points</figcaption>
		
	</figure></p>
<p>At the lab I&rsquo;d already picked out an acrylic sheet while I still had the NeoPixel strip there. It was milky white, but let through light as well without being transparent.</p>
<p>Before, I&rsquo;d used an acrylic sheet of only 1.8mm and I created a test file through Cuttle. This milky white sheet was 4mm, and the design came from Fusion 360 instead. I therefore redid tiny tests to make sure that the holes were <em>just</em> big enough to fit a 1mm rivet; a small rectangle with one or more holes in it.</p>
<p><figure style="flex-grow: 168; flex-basis: 404px">
		<a href="../final-project/contact_lightburn_settings.jpg" data-size="820x487">
			
			<img src="../final-project/contact_lightburn_settings.jpg"
				
				width="820"
				height="487"
				loading="lazy"
				alt="Setting up tests and the contact plate in LightBurn">
		</a>
		
		<figcaption>Setting up tests and the contact plate in LightBurn</figcaption>
		
	</figure></p>
<p>Henk had mentioned that the laser cutter performed much more dependable across larger areas when you placed the material in the center of the bed. But because I didn&rsquo;t fully trust the laser cutter yet, I always did a test in the top-left <em>and</em> bottom-right corner.</p>
<p>I had to do four tests before I found that using a rivet hole diameter of 1.1mm in Fusion 360 resulted in holes that fitted the rivets somewhat snugly (1.0mm was too tight). I found this to be strange because the rivets were actually 1.4mm in diameter, and my Cuttle test before had shown that 1.5mm was the right match for the other acrylic sheet. I was using a <em>kerf</em> of 0.1mm, so I didn&rsquo;t think that was it either.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_hole_tests.jpg" data-size="500x500">
			
			<img src="../final-project/contact_hole_tests.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The many tiny tests I did before finding the right hole setting">
		</a>
		
		<figcaption>The many tiny tests I did before finding the right hole setting</figcaption>
		
	</figure></p>
<p>But trusting the tests, I went ahead and cut out the full plate using the 1.1mm diameter in my Fusion 360 design. Making the etchings first, with the tiny holes next, and finally the bigger holes and outside as a third layer, all with their own settings.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_laser_cut_plate.jpg" data-size="500x500">
			
			<img src="../final-project/contact_laser_cut_plate.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The cut out bottom plate with &gt;100 tiny holes for the rivets">
		</a>
		
		<figcaption>The cut out bottom plate with &gt;100 tiny holes for the rivets</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_rivet_etchings.jpg" data-size="500x500">
			
			<img src="../final-project/contact_rivet_etchings.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Looking close and you can see the etchings">
		</a>
		
		<figcaption>Looking close and you can see the etchings</figcaption>
		
	</figure></p>
<p>When the cutting was done and I looked at the plate, I was reminded of a star map with constellations, especially with those thin etched lines running between some of the holes.</p>
<h3 id="soldering--glueing-the-rivets">Soldering &amp; Glueing the Rivets</h3>
<p>Next came the extremely tedious task of soldering a wire to 76 rivets (and soldering the remaining 38 rivets closed, so no glue would run through it). In Dutch we call this &ldquo;monnikenwerk&rdquo;. I set up a small &ldquo;rivet station&rdquo; on my desk, using a <em>third hand</em> to hold a copper rectangle shape in which I&rsquo;d milled 3x3 tiny holes, while the other hand held one wire. My process for the next few hours became as follows:</p>
<ul>
<li>Cut 10 strips of wire and strip ±5mm from one end.</li>
<li>Place ±5 rivets in the copper rectangle and (try to) put some flux inside.</li>
<li>Fix a wire in the other &ldquo;hand&rdquo;, put some flux on the tip and place it inside the rivet. Not too far inside, it shouldn&rsquo;t stick out.</li>
<li>Heat the underside of the wire just where it goes into the rivet and move in the solder from above. Let the solder flow into the rivet, but not too much, it shouldn&rsquo;t come out on the other end and discolor the copper rivet.</li>
<li>Check if the rivet and wire are stuck together.
<ul>
<li>If not, repeat the step above.</li>
<li>If yes, take out the wire+rivet and place a new wire.</li>
</ul>
</li>
</ul>
<p><figure style="flex-grow: 115; flex-basis: 277px">
		<a href="../final-project/contact_rivet_soldering.jpg" data-size="500x433">
			
			<img src="../final-project/contact_rivet_soldering.jpg"
				
				width="500"
				height="433"
				loading="lazy"
				alt="Tediously soldering wires to rivets for each puzzle piece">
		</a>
		
		<figcaption>Tediously soldering wires to rivets for each puzzle piece</figcaption>
		
	</figure></p>
<p>Thankfully, I managed to solder 40 black wires, 40 red wires, and closed 40 rivets before the day ended at the lab.</p>
<p>The next day I looped all the rivet-wires through the puzzle plate, using books to create a raised plateau with enough room below it for all the wires to hang freely.</p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/contact_wiring_rivets.jpg" data-size="820x608">
			
			<img src="../final-project/contact_wiring_rivets.jpg"
				
				width="820"
				height="608"
				loading="lazy"
				alt="While looping all the soldered rivet-wires through the holes">
		</a>
		
		<figcaption>While looping all the soldered rivet-wires through the holes</figcaption>
		
	</figure></p>
<p>I&rsquo;m glad I made two extra rivet-wires for both colors, because one wire fell off, and another rivet wouldn&rsquo;t fit because I&rsquo;d soldered the wire too crooked somehow.</p>
<p>Once all the rivets were placed (and it looked like a jellyfish), I placed a stiff mat on top and flipped it upside down to glue all the rivets in place. I used a toothpick and general glue, putting a little blob on/into each hole, hoping it would do the trick, and letting it sit for several hours.</p>
<p><figure style="flex-grow: 124; flex-basis: 297px">
		<a href="../final-project/contact_wires_looped.jpg" data-size="500x403">
			
			<img src="../final-project/contact_wires_looped.jpg"
				
				width="500"
				height="403"
				loading="lazy"
				alt="All the wires placed - looking like a jellyfish">
		</a>
		
		<figcaption>All the wires placed - looking like a jellyfish</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_wires_flipped.jpg" data-size="500x500">
			
			<img src="../final-project/contact_wires_flipped.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The plate upside down to glue the rivets">
		</a>
		
		<figcaption>The plate upside down to glue the rivets</figcaption>
		
	</figure></p>
<p>After a few hours I inspected the underside of the plate, and saw that some of the rivets had moved upwards <em>just</em> a little. Darn it! I guess the sheet wasn&rsquo;t pressed down well enough, specifically in the middle.</p>
<p>With the help of my partner, and some arduous labor, we slowly peeled off the glue from the ±20-30 of the rivets (<em>not</em> easy with all the wires in the way!). He then said that I should reglue those rivets and put more weight on the outsides <em>and</em> on the middle. Thankfully, we had a very high glass container that could enclose the length of the wires. And at the end of the evening, I had the following set-up on my room waiting to dry during the night:</p>
<p><figure style="flex-grow: 117; flex-basis: 281px">
		<a href="../final-project/contact_reglue.jpg" data-size="820x699">
			
			<img src="../final-project/contact_reglue.jpg"
				
				width="820"
				height="699"
				loading="lazy"
				alt="Having set up the bottom plate for the second round of glueing">
		</a>
		
		<figcaption>Having set up the bottom plate for the second round of glueing</figcaption>
		
	</figure></p>
<p>The following morning I saw that the re-glueing had worked great, and all rivets had stayed down!</p>
<p><strong>PS</strong> | In case you&rsquo;re wondering why I have 8 of the same book <span class="kaomoji">(*^▽^*)ゞ</span>
 It&rsquo;s a book that I wrote and was recently released, so I got a bunch of them from the publisher, but due to the pandemic I haven&rsquo;t had a change to sell/give them away.</p>
<p>The next task turned out to be <em>quite</em> exhausting as well due to how much concentration it required from me, and how much precise movement, with the fear that I might break a wire at any point (them being solid core wires). I had to <strong>move the NeoPixel plate down onto the bottom plate</strong> while all of the wires were being looped through the holes in the NeoPixel plate.</p>
<p><figure style="flex-grow: 122; flex-basis: 294px">
		<a href="../final-project/contact_stringing_wires_high.jpg" data-size="500x408">
			
			<img src="../final-project/contact_stringing_wires_high.jpg"
				
				width="500"
				height="408"
				loading="lazy"
				alt="Starting out high and having looped a few of the longest wires">
		</a>
		
		<figcaption>Starting out high and having looped a few of the longest wires</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_stringing_wires_medium.jpg" data-size="500x500">
			
			<img src="../final-project/contact_stringing_wires_medium.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="After an hour or two of squishing, moving and looping later">
		</a>
		
		<figcaption>After an hour or two of squishing, moving and looping later</figcaption>
		
	</figure></p>
<p>With all of the wires in the way, it was quite hard to position the middle wires to fit through the closest hole (I didn&rsquo;t want the wires to block the NeoPixels). To assist me in getting the alignment right while the NeoPixel plate was still quite high, I positioned myself directly under a light that was shining straight down, and hung a wire+weight from it.</p>
<p>That way I could use the shadows and light falling onto the bottom plate to check my precision. It still wasn&rsquo;t easy, because the wires touching the plate would try to push the NeoPixel plate in all kinds of directions. The lower the NeoPixel plate got, the harder it was for me to move and change wires.</p>
<p>After ±2-3 hours of semi-frustrating work, I had fixed the NeoPixel plate on top with no wires having broken! <span class="kaomoji">(๑•̀ㅂ•́)ง✧</span>
 I was now left with a porcupine, yay! (I had bought some M5x40mm bolts and M5 nuts to make the two plates float a little above one another).</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_neopixel_attached.jpg" data-size="500x500">
			
			<img src="../final-project/contact_neopixel_attached.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Having latched the NeoPixel plate onto the bottom puzzle plate">
		</a>
		
		<figcaption>Having latched the NeoPixel plate onto the bottom puzzle plate</figcaption>
		
	</figure></p>
<p>I&rsquo;d made a guess of setting the distance between the two plates at 18mm. However, to be sure, I hooked up the NeoPixel plate to assess how the light was looking through the plate and if that distance felt good (it did).</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_neopixel_on_1.jpg" data-size="500x500">
			
			<img src="../final-project/contact_neopixel_on_1.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The NeoPixels seen through the bottom puzzle plate">
		</a>
		
		<figcaption>The NeoPixels seen through the bottom puzzle plate</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/contact_neopixel_on_3.jpg" data-size="500x500">
			
			<img src="../final-project/contact_neopixel_on_3.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 176; flex-basis: 423px">
		<a href="../final-project/contact_neopixel_inbetween.jpg" data-size="820x465">
			
			<img src="../final-project/contact_neopixel_inbetween.jpg"
				
				width="820"
				height="465"
				loading="lazy"
				alt="Looking through the little space between the two plates">
		</a>
		
		<figcaption>Looking through the little space between the two plates</figcaption>
		
	</figure></p>
<h3 id="connecting-to-the-pins">Connecting to the Pins</h3>
<p>The next step was to connect the 38 black and red wires to the boards/pins of the three PCBs. The black wires, the <em>GND</em>, could all be soldered to the copper tape lines that I&rsquo;d stuck along the back of the NeoPixel plate.</p>
<p>Just to be sure that the copper tape would remain sticky even after it was heated by soldering, I created a tiny test with a spare piece of acrylic. Thankfully, the tape held on really well even after having to use quite a lot of solder before it finally stuck to both the copper tape and wire.</p>
<p><figure style="flex-grow: 189; flex-basis: 454px">
		<a href="../final-project/contact_soldering_test.jpg" data-size="500x264">
			
			<img src="../final-project/contact_soldering_test.jpg"
				
				width="500"
				height="264"
				loading="lazy"
				alt="A small test to check that the copper tape held on after soldering">
		</a>
		
		<figcaption>A small test to check that the copper tape held on after soldering</figcaption>
		
	</figure></p>
<p>I folded all the black wires towards the copper tape, cut them to size and stripped the section to about the width of the copper tape, trying to make sure that the black wires weren&rsquo;t obstructing any of the pins on the PCBs.</p>
<p><figure style="flex-grow: 179; flex-basis: 431px">
		<a href="../final-project/contact_ground_wires_cut_stripped.jpg" data-size="820x456">
			
			<img src="../final-project/contact_ground_wires_cut_stripped.jpg"
				
				width="820"
				height="456"
				loading="lazy"
				alt="Having cut and stripped all GND wires">
		</a>
		
		<figcaption>Having cut and stripped all GND wires</figcaption>
		
	</figure></p>
<p>The soldering went pretty easily. As with the test, I had to add quite some solder before it stuck to both the copper tape and the wire.</p>
<p><figure style="flex-grow: 205; flex-basis: 493px">
		<a href="../final-project/contact_ground_wires_soldered.jpg" data-size="820x399">
			
			<img src="../final-project/contact_ground_wires_soldered.jpg"
				
				width="820"
				height="399"
				loading="lazy"
				alt="Having soldered the GND wires to the copper tape">
		</a>
		
		<figcaption>Having soldered the GND wires to the copper tape</figcaption>
		
	</figure></p>
<p>If only the red wires would be that easy to solder as well&hellip;. <span class="kaomoji">o(╥﹏╥)o</span>
</p>
<p>With all the black wires out of the way and fixed to the copper tape I started on &ldquo;routing&rdquo; the red wires to the (header) pins on the PCBs. Trying to figure out which wires to solder to which pins so the overall distance from the wires to the pins was as short as possible, that it wasn&rsquo;t blocking any other pins, that the wire was long enough in the first place.</p>
<p>Knowing to which group of 4 pins each wire should be soldered I started the <em>extremely slow</em> process of pushing the wire into position to align straight to the pin, to cut the wire so it would end at the start of the pin, to strip the wire, and then, to <em>somehow</em> solder the wire to the pin (while keeping the shrink tube far enough back).</p>
<p>The wire and the pin did <em>not</em> want to stick together. I had to try quite a lot of times per pin to make them stick, but the pin would often just jump back up after I slightly touched it, or it would come loose as I was working on another pin <span class="kaomoji">( ≧Д≦)</span>
</p>
<p>With only 8 pins having taken about 1.5-2 hours (not kidding), I remembered that I had a flux pen. It didn&rsquo;t really seem to work when I tried it on PCBs, but I was desperate enough to try it again with this. Although it wasn&rsquo;t magical like the soldering paste in the lab had been, it <em>did</em> make a bit of a difference. It was still difficult to solder the wire to the pin, but once the connection was made, it seemed to be more sturdy, able to handle more stress.</p>
<p>Using a multimeter I made sure to check the connection of each soldered pin to the rivet in the puzzle plate.</p>
<p>About an hour later (at midnight) I finished soldering all the wires to the <code>0x21</code> board (the one on the right):</p>
<p><figure style="flex-grow: 126; flex-basis: 303px">
		<a href="../final-project/contact_red_wires_halfway.jpg" data-size="820x649">
			
			<img src="../final-project/contact_red_wires_halfway.jpg"
				
				width="820"
				height="649"
				loading="lazy"
				alt="Having FINALLY soldered 16 of the 38 wires to the pins on board 0x21">
		</a>
		
		<figcaption>Having FINALLY soldered 16 of the 38 wires to the pins on board 0x21</figcaption>
		
	</figure></p>
<p>I didn&rsquo;t have a heat gun to close the shrink tubes, and my attempt with a lighter on the first 4 pins was&hellip;.. not smart to redo. I therefore asked Loes if I could borrow hers the next time we saw each other.</p>
<p>The next morning it took 2-3 more hours to position, cut, strip, curse, and solder the remaining 22 red wires to their pins. I&rsquo;m not sure if the result would be labelled as a &ldquo;wire mess&rdquo; or not <span class="kaomoji">(*^▽^*)ゞ</span>
</p>
<p><figure style="flex-grow: 92; flex-basis: 220px">
		<a href="../final-project/contact_red_wires_finished.jpg" data-size="820x891">
			
			<img src="../final-project/contact_red_wires_finished.jpg"
				
				width="820"
				height="891"
				loading="lazy"
				alt="Having connected all of the black and red wires">
		</a>
		
		<figcaption>Having connected all of the black and red wires</figcaption>
		
	</figure></p>
<p>One benefit of this over having possibly used upright pin headers (that I wasn&rsquo;t aware of when I designed the PCBs), is that this wiring takes up very little height. The bolts are sticking up from the bottom more than the wiring, so I can flip the plates upside down without it resting on the wiring.</p>
<p><figure style="flex-grow: 182; flex-basis: 438px">
		<a href="../final-project/contact_red_wires_finished_side.jpg" data-size="820x449">
			
			<img src="../final-project/contact_red_wires_finished_side.jpg"
				
				width="820"
				height="449"
				loading="lazy"
				alt="A side view shows how flat all the wiring remains">
		</a>
		
		<figcaption>A side view shows how flat all the wiring remains</figcaption>
		
	</figure></p>
<p>I&rsquo;d gotten the copper tape that acted as my &ldquo;general ground&rdquo; from my partner and he said that the carbon backside of the tape was conductive. I could stick the tape on top of each other and the current would flow from one strip to the next. I&rsquo;d therefore used several smaller copper strips to connect the bigger strips to the PCBs.</p>
<p>I wanted to check this. Using a multimeter I did a continuity test on two strips that were stuck onto each other, but I didn&rsquo;t get a <em>biep</em> sound. My partner said that I shouldn&rsquo;t trust that test too much. I therefore attached my FTDI to the main board, to supply the power. I measured the voltage from my <em>VCC</em> to the different <em>GND</em> areas and noticed that it was 5V along the PCBs, but didn&rsquo;t register for the copper tape sections.</p>
<p>I guess the copper tape&rsquo;s backing <em>wasn&rsquo;t</em> conductive in my case (my partner mentioned that in their lab they did use 25,000V! so maybe that&rsquo;s what made the difference). I removed the copper tape bridges and instead used some leftover black wire to solder the different copper strips together and back to the main PCB. Thankfully, then I did get a proper reading of 5V when measuring the voltage from the copper tape to <em>VCC</em>.</p>
<h3 id="testing-the-connections">Testing the Connections</h3>
<p>With both the black and red the wires now seemingly properly connected it was time to check if it all worked through my ATtiny3216. I flipped the puzzle plate right-side-up, connected the FTDI and UPDI to the PCB at the underside and started from the simple code I&rsquo;d written for the &ldquo;Networking &amp; Communications&rdquo; week to communicate with the PCA9555Ds.</p>
<p>Strangely, my ATtiny didn&rsquo;t seem to react to any new uploaded code. I kept commenting more and more in my code, to simply turning on a LED, to only printing &ldquo;hey&rdquo; in the Serial Monitor, but everything I tried resulted in utter silence from my board.</p>
<p>I had no issues with uploading, so the UPDI wasn&rsquo;t the issue. I flipped the board back around to check if there was power running along the right lines using a multimeter, and this all seemed fine too. I unplugged the FTDI for a bit and I <em>think</em> that did the trick&hellip; a little? My board finally started responding and printing &ldquo;hey&rdquo; in the Serial Monitor. I got a LED to turn on, but as I was uncommenting more of my original program, it stopped responding again. I would then re-comment that last step I did, upload the new program, but it would remain silent still. <em>Even though I knew that code worked a minute ago</em>. Unplugging the FTDI a few times and just trying again and again, and at some point it <em>would</em> work.</p>
<p>I&rsquo;m truly not sure why my ATtiny would sometimes not execute anything anymore after a new upload, while it would work fine a bit later, but <em>eventually</em> I managed to get it to take my full code and still work after the upload. Thankfully, although I don&rsquo;t know why, it didn&rsquo;t act this weird ever again.</p>
<p>One nasty thing I noticed when I flipped the plates (to have the wiring pointing up again) to check why my board wasn&rsquo;t responding, was that my UPDI pin header was almost falling from the PCB! <span class="kaomoji">(⑉⊙ȏ⊙)</span>
 It was literally hanging by its traces!</p>
<p>It hadn&rsquo;t completely broken any traces thankfully (only lifted them up), so I gently unplugged my UPDI and glued the black bottom of the UPDI pin header to the PCB. Not wanting to mess up those traces while the glue was drying I hooked up some of my logic analyzer grabbers to the <em>UPDI</em> and <em>GND</em> lines of my UPDI to their respective pins on the ATtiny board so I could keep uploading new code:</p>
<p><figure style="flex-grow: 132; flex-basis: 318px">
		<a href="../final-project/contact_updi_hooks.jpg" data-size="820x618">
			
			<img src="../final-project/contact_updi_hooks.jpg"
				
				width="820"
				height="618"
				loading="lazy"
				alt="Using grabbers to connect my UPDI to my ATtiny">
		</a>
		
		<figcaption>Using grabbers to connect my UPDI to my ATtiny</figcaption>
		
	</figure></p>
<p>The FTDI, thankfully having six connections, hadn&rsquo;t fallen off. Nevertheless, I taped the USB cable to the bottom of the board with painters tape so the pressure would be taken off from the FTDI pin headers.</p>
<p>I&rsquo;d written a simple piece of code that outputted the state of all 38 puzzle pins as a long string which I called in the <code>loop</code> function:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">checkPins</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">byte</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">//Check pin states of ATtiny
</span><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">6</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
    <span class="n">n</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span><span class="c1">//for i
</span><span class="c1"></span>
  <span class="c1">//Check pin states of 0x20 board
</span><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">board_0x20</span><span class="p">.</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
    <span class="n">n</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span><span class="c1">//for i
</span><span class="c1"></span>
  <span class="c1">//Check pin states of 0x21 board
</span><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">board_0x21</span><span class="p">.</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
    <span class="n">n</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span><span class="c1">//for i
</span><span class="c1"></span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">);</span>
<span class="p">}</span><span class="c1">//void checkPins
</span></code></pre></div><p>It <em>should</em> print a long string of <code>1</code>s, since I&rsquo;d not placed any puzzle piece/connection on top. But I was seeing a <code>0</code> at the end:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="mi">11111111111111111111111111111111111110</span>
</code></pre></div><p>Apparently the 16th pin (<em>OI1_7</em>) of the <code>0x21</code> board felt that it was connected/closed. I had no idea where on the puzzle plate that position was though.</p>
<p>I therefore adjusted my code to report a change in state from any of the pins; removing the <code>Serial.print</code> from each for loop in the code above and replacing it by:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">state_current</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="n">state_current</span> <span class="o">!=</span> <span class="n">pin_state</span><span class="p">[</span><span class="n">n</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;ATtiny board: &#34;</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="n">pin_state</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">state_current</span><span class="p">;</span>
<span class="p">}</span><span class="c1">//if
</span></code></pre></div><p>With the board right-side-up again I grabbed a piece of copper and placed it on the different rivets to see which area belonged to which pin. Thankfully the very lightly etched lines in the plate, showing which two rivets were a &ldquo;pair&rdquo;, made it straightforward for me to know how to place the copper strip.</p>
<p>The video below shows how the terminal shows when a connection is made or broken using the copper strip on the rivets (apologies for the crappy video, I couldn&rsquo;t quite angle my phone correctly to see the plate, but also the terminal on my screen).</p>
<p>I definitely need to do something about the <em>debounce</em>, since placing the copper onto the rivets generally resulted in several notifications about a new connection in my terminal. This isn&rsquo;t due to noise I think, because I&rsquo;m using internal pullup resistors, but due to my imperfect <em>human</em> hand moving the copper around as I&rsquo;m placing it on the rivets I think.</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='contact_testing_connections.mp4' type="video/mp4"></video>
     
    
    <figcaption>My AxiDraw busy drawing out the patterns</figcaption>
    
</figure>
<p>Except for that one connection all the other 37 pins were registering in the terminal <span class="kaomoji">(　＾∇＾)</span>
</p>
<p>I&rsquo;d marked the one connection that wasn&rsquo;t showing up with some painters tape, and took out my multimeter to start with some continuity tests. I found that one rivet was connected to the pin, but a little later I found that it was <em>also</em> connected to <em>GND</em>!</p>
<p><figure style="flex-grow: 146; flex-basis: 350px">
		<a href="../final-project/contact_investigating_connection.jpg" data-size="500x342">
			
			<img src="../final-project/contact_investigating_connection.jpg"
				
				width="500"
				height="342"
				loading="lazy"
				alt="Having marked the connection that wasn&rsquo;t working and going to investigate with the multimeter">
		</a>
		
		<figcaption>Having marked the connection that wasn’t working and going to investigate with the multimeter</figcaption>
		
	</figure></p>
<p>It seemed rather unlikely that this ground connection came from the rivet and wire itself, they were clearly separated from everything else. Perhaps the trace or pin on the PCA9555D board was badly soldered? Looking closer, I thought I saw some tiny specs. I cleaned the area between the traces with the pointy tip of the multimeter&rsquo;s probes, and that was apparently it! After the cleaning the pin was no longer connected to <em>GND</em> and the contact point started responding to placing a piece of copper on the rivets.</p>
<p>Great! I <em>finally</em> finished the bottom of the puzzle plate, with the contact points and all connected to my PCBs at the bottom <span class="kaomoji">ᕦ(ò_óˇ)ᕤ</span>
</p>
<p>After I also finished the living hinge to wrap around the acrylic inner parts (you can read about this in the next section), I shortened the main power and NeoPixel data line, hooked it up to a plug (and a 1000μF capacitor), which then ran towards the 5V power adapter plug (see the top of the image below).</p>
<p><figure style="flex-grow: 106; flex-basis: 255px">
		<a href="../final-project/contact_plug_power_full.jpg" data-size="820x769">
			
			<img src="../final-project/contact_plug_power_full.jpg"
				
				width="820"
				height="769"
				loading="lazy"
				alt="The main power comes from the side and goes into the two plugs which then go to the NeoPixels and my board">
		</a>
		
		<figcaption>The main power comes from the side and goes into the two plugs which then go to the NeoPixels and my board</figcaption>
		
	</figure></p>
<p>The reason why I have a plug connection <em>within</em> the wooden enclosure is that I can also hook up the 5V power adapter straight to the NeoPixels and my PCBs without having to go through the opening in the wooden enclosure (in case I had to do some serious debugging/fixing while continuing to work on my project); in short, I can hook up the power while the electronics are taken out of the wooden enclosure.</p>
<h2 id="the-wooden-enclosure">The Wooden Enclosure</h2>
<p>With the &ldquo;electronic&rdquo; side finished (not the programming of the NeoPixels though), it was time to truly design and create the (wooden) enclosure.</p>
<h3 id="living-hinges">Living Hinges</h3>
<p>Since I wanted the outer shape to be a circle, I started by investigating <em>living hinges</em>, which is a technique to cut sturdy material in such a way that it becomes (really) flexible.</p>
<p>I&rsquo;d been intrigued when I first learned about it during the &ldquo;Computer-Controlled Cutting&rdquo; week. I didn&rsquo;t have the time to work with living hinges then, so I was looking actually forward that I&rsquo;d have the chance now.</p>
<p>After some searching (and a few Fab Academy sites from past years), I came <a class="link" href="https://www.instructables.com/Curved-laser-bent-wood/"  target="_blank" rel="noopener"
    >across</a> <a class="link" href="https://obrary.com/products/living-hinge-patterns"  target="_blank" rel="noopener"
    >several</a> <a class="link" href="https://denzilmakes.com/collections/plans/products/living-hinge-pattern-dxf-file"  target="_blank" rel="noopener"
    >pages</a> that seem to be <em>the</em> source of most living hinge patterns found online (<a class="link" href="https://fabacademy.org/2019/labs/irbid/students/tarek-asfour/week3.html"  target="_blank" rel="noopener"
    >this</a> student has investigated how well some of those patterns bend, very handy).</p>
<p>I was a bit surprised that I couldn&rsquo;t find pages that explained &ldquo;the math&rdquo; behind living hinges. Basically the &ldquo;how to&rdquo; of designing a new pattern, what to keep in mind. Therefore, I tried to just find as many patterns that I liked to see what they had in common, and how to remix them into my own design later.</p>
<p>In general I saw that patterns with a cut from one side to <em>almost</em> the other side were very flexible. As a start, I created an ellipse in Fusion 360 with a whole array of rectangles from one end to another, and extruded along a zigzag pattern.</p>
<p><figure style="flex-grow: 221; flex-basis: 532px">
		<a href="../final-project/living_hinge_earring_fusion360.png" data-size="750x338">
			
			<img src="../final-project/living_hinge_earring_fusion360.png"
				
				width="750"
				height="338"
				loading="lazy"
				alt="The design for my first living hinge">
		</a>
		
		<figcaption>The design for my first living hinge</figcaption>
		
	</figure> <figure style="flex-grow: 159; flex-basis: 382px">
		<a href="../final-project/living_hinge_cutting_earring.jpg" data-size="500x314">
			
			<img src="../final-project/living_hinge_cutting_earring.jpg"
				
				width="500"
				height="314"
				loading="lazy"
				alt="Cutting the pattern">
		</a>
		
		<figcaption>Cutting the pattern</figcaption>
		
	</figure></p>
<p>I was <em>amazed</em> by how well it came out, it was <em>soooo</em> flexible! If wood worked this well, I wondered if acrylic would work as well, it being so sturdy (and not flexible). I cut the same pattern from a small piece of red acrylic, and it was just as flexible, easily bending 180° backwards.</p>
<p><figure style="flex-grow: 90; flex-basis: 218px">
		<a href="../final-project/living_hinge_earring_result_flat.jpg" data-size="500x550">
			
			<img src="../final-project/living_hinge_earring_result_flat.jpg"
				
				width="500"
				height="550"
				loading="lazy"
				alt="The first wooden and acrylic cuts">
		</a>
		
		<figcaption>The first wooden and acrylic cuts</figcaption>
		
	</figure> <figure style="flex-grow: 79; flex-basis: 190px">
		<a href="../final-project/living_hinge_earring_result_bended.jpg" data-size="500x629">
			
			<img src="../final-project/living_hinge_earring_result_bended.jpg"
				
				width="500"
				height="629"
				loading="lazy"
				alt="Folded backward into earrings">
		</a>
		
		<figcaption>Folded backward into earrings</figcaption>
		
	</figure></p>
<p>Why this oval shape and not simple rectangles as most tests that I saw online. Well, when I cut one more of each, bend them backward, and voila, I&rsquo;d have some really cool earrings! <span class="kaomoji">(⌐■_■)</span>
</p>
<p>With this first test having gone so well, I designed two more possible living hinge patterns, based on some designs I&rsquo;d seen on the web that I liked. My goal was to make a pattern featuring hexagons (of course), but I also liked some patterns featuring ovals.</p>
<p>My oval pattern didn&rsquo;t feature cuts from one side to almost the other and the result was that the 10cm strip <em>barely</em> bended. Not a good pattern thus.</p>
<p><figure style="flex-grow: 168; flex-basis: 403px">
		<a href="../final-project/living_hinge_oval_pattern.jpg" data-size="600x357">
			
			<img src="../final-project/living_hinge_oval_pattern.jpg"
				
				width="600"
				height="357"
				loading="lazy"
				alt="Lots of ovals">
		</a>
		
		<figcaption>Lots of ovals</figcaption>
		
	</figure> <figure style="flex-grow: 93; flex-basis: 225px">
		<a href="../final-project/living_hinge_oval_pattern_bended.jpg" data-size="500x533">
			
			<img src="../final-project/living_hinge_oval_pattern_bended.jpg"
				
				width="500"
				height="533"
				loading="lazy"
				alt="This didn&rsquo;t bend any better than the plain wood">
		</a>
		
		<figcaption>This didn’t bend any better than the plain wood</figcaption>
		
	</figure></p>
<p>I based my hexagon design on a <a class="link" href="https://www.etsy.com/jp/listing/510930100/flexible-laser-cut-bracelet-vector-art"  target="_blank" rel="noopener"
    >bracelet</a> I&rsquo;d seen online, which featured circles along the cuts. I changed those to hexagons. When I laser cut it, I noticed that I&rsquo;d barely left any space in between all the holes. That hadn&rsquo;t been very obvious to me when looking at the design in Fusion 360. As a result, it bended <em>extremely</em> well.</p>
<p><figure style="flex-grow: 169; flex-basis: 405px">
		<a href="../final-project/living_hinge_hex_pattern_small.jpg" data-size="600x355">
			
			<img src="../final-project/living_hinge_hex_pattern_small.jpg"
				
				width="600"
				height="355"
				loading="lazy"
				alt="A design featuring hexagons">
		</a>
		
		<figcaption>A design featuring hexagons</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/living_hinge_hex_pattern_small_bended.jpg" data-size="500x500">
			
			<img src="../final-project/living_hinge_hex_pattern_small_bended.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="This pattern was extremely flexible">
		</a>
		
		<figcaption>This pattern was extremely flexible</figcaption>
		
	</figure></p>
<p>I quite liked the hexagon design, but I didn&rsquo;t need such flexibility and would instead want more strength in the wood (i.e. less holes). I removed some hexagons along the columns, going from a <code>4-3-4-...</code> pattern to a <code>3-2-3-...</code> pattern, and increased the space between each pattern to <code>11mm</code>.</p>
<p><figure style="flex-grow: 175; flex-basis: 421px">
		<a href="../final-project/living_hinge_hex_pattern.jpg" data-size="600x342">
			
			<img src="../final-project/living_hinge_hex_pattern.jpg"
				
				width="600"
				height="342"
				loading="lazy"
				alt="Less hexagons and more spacing between the pattern">
		</a>
		
		<figcaption>Less hexagons and more spacing between the pattern</figcaption>
		
	</figure> <figure style="flex-grow: 74; flex-basis: 178px">
		<a href="../final-project/living_hinge_hex_pattern_bended.jpg" data-size="500x674">
			
			<img src="../final-project/living_hinge_hex_pattern_bended.jpg"
				
				width="500"
				height="674"
				loading="lazy"
				alt="Less flexible, but bending more than enough">
		</a>
		
		<figcaption>Less flexible, but bending more than enough</figcaption>
		
	</figure></p>
<p>The result was much sturdier, but still easy enough to bend around the circle radius that I needed for my puzzle box.</p>
<p>Next came the more difficult part of the design. I wanted to &ldquo;fix&rdquo; this living hinge between two circular plates, using joints; one plate along the top and one along the bottom. The one at the top would be flush with the bottom puzzle plate, the one at the bottom would be what the internal &ldquo;NeoPixel &amp; puzzle plate&rdquo; would rest upon. Plus, I needed to have the start and end of the living hinge lock together somehow.</p>
<p>I&rsquo;d seen a <a class="link" href="https://www.instructables.com/Laser-cut-enclosure-with-living-hinge-lid/"  target="_blank" rel="noopener"
    >few</a> <a class="link" href="https://nl.pinterest.com/pin/817544138608965741/"  target="_blank" rel="noopener"
    >examples</a> of living hinges incorporating joints. Using these as examples, I adjusted my design in Fusion 360 to include joints. It was quite a gamble how often along the edge I&rsquo;d need joints, and if a joint of 4.5mm in width would be enough (the joint was made 3mm high, the height of the wood I intended for the top and bottom plates).</p>
<p><figure style="flex-grow: 156; flex-basis: 376px">
		<a href="../final-project/living_hinge_joint_fusion360.png" data-size="785x501">
			
			<img src="../final-project/living_hinge_joint_fusion360.png"
				
				width="785"
				height="501"
				loading="lazy"
				alt="Adding joints to the design">
		</a>
		
		<figcaption>Adding joints to the design</figcaption>
		
	</figure></p>
<p>For the interlocking mechanism along both edges I created, in style with this project, puzzle ears <span class="kaomoji">(⌐■_■)</span>
. I&rsquo;d basically already &ldquo;tested&rdquo; how to create puzzle ears in Fusion 360 during my <a class="link" href="../blog/week-12/#a-hexagonal-puzzle-piece" >&ldquo;Molding &amp; Casting</a>&rdquo; week during which I&rsquo;d made a self-fitting puzzle piece shape.</p>
<p>I also created a short section of arc with the radius of my puzzle box including the joints. For this I could use the <em>arc length</em> formula to calculate the right place for each joint; along the living hinge each joint was <code>55mm</code> apart. With the arc length I could thus get the angle in between each joint as <code>θ = s / R = 55mm / (190mm - 3mm) = 0.29 rad = 16.9°</code>.</p>
<p>Part of me was afraid that if I&rsquo;d create a living hinge that was <code>X</code> cm long according to <code>X = 2πR</code>, that the circle it would loop into was either bigger or smaller than <code>R</code> in radius due to it stretching or the material that had been lasered away in between the slits.</p>
<p>Thankfully, the short section that I made curved really nicely along the joints. I guess the flexibility of the living hinge meant that it was able to form to a range of radii around the original <code>R</code>.</p>
<p><figure style="flex-grow: 206; flex-basis: 494px">
		<a href="../final-project/living_hinge_joint_test.jpg" data-size="820x398">
			
			<img src="../final-project/living_hinge_joint_test.jpg"
				
				width="820"
				height="398"
				loading="lazy"
				alt="Testing the joints">
		</a>
		
		<figcaption>Testing the joints</figcaption>
		
	</figure></p>
<p>I&rsquo;d used a <em>kerf</em> of <code>0.1mm</code>. That was <em>just</em> working for the joints, it was quite tight, but with some pushing I could fit them. The puzzle ears on the other hand weren&rsquo;t fitting at all, much too tight. I therefore did a quick kerf test on this wood, and the wood that I intended for the final living hinge. This showed me that the light wood had a kerf of only <code>0.035mm</code>, while the darker wood had <code>0.065mm</code>.</p>
<p><figure style="flex-grow: 145; flex-basis: 349px">
		<a href="../final-project/living_hinge_kerf_test.jpg" data-size="500x343">
			
			<img src="../final-project/living_hinge_kerf_test.jpg"
				
				width="500"
				height="343"
				loading="lazy"
				alt="Doing a kerf test for two types of wood">
		</a>
		
		<figcaption>Doing a kerf test for two types of wood</figcaption>
		
	</figure></p>
<p>Making another test with these values showed that the puzzle ears fitted nicely. Although I did find that the joints were just a bit too loose (they were really tiny), so I&rsquo;d probably have to increase the kerf value of the top and bottom plate to create a tighter fit.</p>
<p>There was one final thing to incorporate/test in the living hinge before I could create the full design; the opening for the power. I had a bought a nice round plug that fitted the (male) adapter of the 5V power supply. I had to update the design in one location, closing some of the hexagons and adding a bigger circular hole. I hoped that the wood would still be bendable enough around that area.</p>
<p>Lasercutting a short section showed that the wood was indeed less bendable, but that it wasn&rsquo;t really noticeable when it was placed along the radius I intended.</p>
<p><figure style="flex-grow: 121; flex-basis: 290px">
		<a href="../final-project/living_hinge_plug_fusion360.jpg" data-size="500x413">
			
			<img src="../final-project/living_hinge_plug_fusion360.jpg"
				
				width="500"
				height="413"
				loading="lazy"
				alt="Opening for a plug">
		</a>
		
		<figcaption>Opening for a plug</figcaption>
		
	</figure> <figure style="flex-grow: 197; flex-basis: 473px">
		<a href="../final-project/living_hinge_plug_test.jpg" data-size="600x304">
			
			<img src="../final-project/living_hinge_plug_test.jpg"
				
				width="600"
				height="304"
				loading="lazy"
				alt="The plug fitted through the hole">
		</a>
		
		<figcaption>The plug fitted through the hole</figcaption>
		
	</figure></p>
<p>With all of these elements now figured out, I set out to create the full 1175mm long section of living hinge (<code>2πR -&gt; 2π * (190mm - 3mm)</code>).</p>
<p>I quickly stumbled upon performance issues with Fusion 360 as I increased the hexagon pattern. Every little step that I took inside the <em>Sketch</em> would result in a several second lag. I then remembered that I&rsquo;d come across a similar issue during the &ldquo;Mechanical &amp; Machine Design&rdquo; week, as I was creating a hexagonal grid for the lamp&rsquo;s inside. Apparently it&rsquo;s very performance costly to create large patterns while in the <em>Sketch</em> environment.</p>
<p><figure style="flex-grow: 244; flex-basis: 587px">
		<a href="../final-project/living_hinge_hex_pattern_sketch_fusion360.jpg" data-size="820x335">
			
			<img src="../final-project/living_hinge_hex_pattern_sketch_fusion360.jpg"
				
				width="820"
				height="335"
				loading="lazy"
				alt="Slow performance when creating a big pattern in a sketch">
		</a>
		
		<figcaption>Slow performance when creating a big pattern in a sketch</figcaption>
		
	</figure></p>
<p>Instead, you should create the pattern while in the standard <em>Design</em> environment. However, that creates a bit of a funny working logic. In the <em>Design</em> environment you can only pattern <em>objects</em>. Since I wanted to have hexagonal <em>holes</em> and slices in my design I basically had to take the following steps:</p>
<ul>
<li>Create one hexagon from the column with 3 hexagons, along with the tiny hexagon at the top and the tiny rectangle that is the slit. Do the same for the column with only 2 hexagons.</li>
</ul>
<p><figure style="flex-grow: 62; flex-basis: 149px">
		<a href="../final-project/living_hinge_hex_pattern_better_fusion360.png" data-size="416x670">
			
			<img src="../final-project/living_hinge_hex_pattern_better_fusion360.png"
				
				width="416"
				height="670"
				loading="lazy"
				alt="The base pattern in the Sketch">
		</a>
		
		<figcaption>The base pattern in the Sketch</figcaption>
		
	</figure></p>
<ul>
<li>Extrude that one hexagon from the row with 3 hexagons and turn that into 3 hexagons using the <em>Rectangular Pattern</em> option. Extrude the tiny hexagon and the rectangle, and join it with the 3 hexagons.</li>
<li>Repeat the process for the other column that has two large hexagons. You then have two bodies that constitute the full base pattern.</li>
<li>Use the <em>Rectangular Pattern</em> to duplicate this base pattern however often you need (106 times in my case).</li>
</ul>
<p><figure style="flex-grow: 105; flex-basis: 252px">
		<a href="../final-project/living_hinge_hex_pattern_extrude_1.png" data-size="399x380">
			
			<img src="../final-project/living_hinge_hex_pattern_extrude_1.png"
				
				width="399"
				height="380"
				loading="lazy"
				alt="Extruded one hexagon and used a Rectangular Pattern to create three">
		</a>
		
		<figcaption>Extruded one hexagon and used a Rectangular Pattern to create three</figcaption>
		
	</figure> <figure style="flex-grow: 106; flex-basis: 255px">
		<a href="../final-project/living_hinge_hex_pattern_extrude_2.png" data-size="504x473">
			
			<img src="../final-project/living_hinge_hex_pattern_extrude_2.png"
				
				width="504"
				height="473"
				loading="lazy"
				alt="Continue the extrusion, patterning and join to create the base pattern">
		</a>
		
		<figcaption>Continue the extrusion, patterning and join to create the base pattern</figcaption>
		
	</figure></p>
<ul>
<li>Finally, make a new sketch with <em>just</em> the rectangle of the full 1175mm length. Extrude this, and use the <em>Combine</em> command to cut out all the pattern bodies (the <em>Tools</em> can be discarded).</li>
</ul>
<p><figure style="flex-grow: 158; flex-basis: 379px">
		<a href="../final-project/living_hinge_hex_pattern_cut_fusion360.png" data-size="1149x727">
			
			<img src="../final-project/living_hinge_hex_pattern_cut_fusion360.png"
				
				width="1149"
				height="727"
				loading="lazy"
				alt="Use combine to cut all the hexagon patterns from a rectangle">
		</a>
		
		<figcaption>Use combine to cut all the hexagon patterns from a rectangle</figcaption>
		
	</figure></p>
<p>A few more steps than simply creating a pattern in a <em>Sketch</em> and extruding the right sections. However, although not fast, this was at least doable, even with hundreds of patterns.</p>
<p>Doing the joints and the puzzle ears followed a similar process to create through a simple sketch, extruding it and only then making the pattern to extrude from the base rectangle.</p>
<p>After I&rsquo;d finally created the full body of the living hinge it took a few minutes to <em>Project</em> it into a <em>Sketch</em>. I then right-clicked the sketch and clicked &ldquo;save as DXF&rdquo;. And then I waited&hellip; and waited&hellip; I had experienced Fusion 360 needing some to export sketches, but after an hour I forcibly quit the program to try and work on some other parts. Perhaps I could retry exporting the living hinge sketch during the night when I was asleep.</p>
<p>Voicing my frustrations with Fusion with Michelle she asked if I&rsquo;d tried exporting a sketch using the <em>Drawings</em> environment; where you generally create technical drawings. That seemed like a very interesting approach! I turned my living hinge body into a <em>Drawing</em>, using the largest preset of A0 for the &ldquo;paper size&rdquo; and selecting the &ldquo;top&rdquo; view. I found that you can easily remove all the notes and lines that are on the drawing by default by simply selecting them and pressing backspace.</p>
<p><figure style="flex-grow: 409; flex-basis: 983px">
		<a href="../final-project/living_hinge_drawing.png" data-size="1500x366">
			
			<img src="../final-project/living_hinge_drawing.png"
				
				width="1500"
				height="366"
				loading="lazy"
				alt="Using the &ldquo;Drawing&rdquo; environment to create a .dxf file of the full living hinge">
		</a>
		
		<figcaption>Using the “Drawing” environment to create a .dxf file of the full living hinge</figcaption>
		
	</figure></p>
<p>With only my living hinge left on the &ldquo;drawing&rdquo; I went to <em>Export</em> -&gt; <em>Export sheet as DXF</em>, crossed my fingers that it would work, waited a minute and it was done! <span class="kaomoji">(๑•̀ㅂ•́)ง✧</span>
 If only I&rsquo;d known <em>that</em> before!</p>
<p>I picked a nice sheet of ±3mm rustic brown multiplex that was about 1400mm long. Since that was quite a distance, and the laser doesn&rsquo;t have an even power output along its bed I started with some tests along both ends of the wood. I finally settled on using a speed of 20, max power of 65% and min power of 20%, using a kerf of 0.065mm.</p>
<p>It took about 25 minutes for the machine to cut out all the lines and hexagons. Thankfully, it had cut out the pattern fully even at the far side (there was a clear difference if you looked at the back of the wood, with one end having lots of black burn marks, while the other end had barely any soot on it).</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='living_hinge_final_cutting.mp4' type="video/mp4"></video>
     
    
    <figcaption>Cutting the final living hinge</figcaption>
    
</figure>
<p>I forgot to take a photo, but as I picked up all 1175mm of the living hinge along both ends, I was surprised how flexible it was, with the middle section drooping far down.</p>
<h3 id="joint-plates">Joint Plates</h3>
<p>The two plates that would fit inside the joints along the living hinge at the top and bottom were quite simple. The top plate would lie flush with the bottom puzzle plate, while the bottom plate would be a ring on which the internal acrylic plates would rest. I added six holes so I could eventually use bolts to hold the outer plates (and final top and bottom plates) together.</p>
<p>The only tricky part was to set-up the joints at the correct intervals. Thankfully, I&rsquo;d already done this partly while making the small test arc with joints before.</p>
<p><figure style="flex-grow: 169; flex-basis: 407px">
		<a href="../final-project/living_hinge_joint_plates_fusion360.png" data-size="896x528">
			
			<img src="../final-project/living_hinge_joint_plates_fusion360.png"
				
				width="896"
				height="528"
				loading="lazy"
				alt="Having designed the top and bottom &ldquo;joint plates&rdquo; that go around the central &ldquo;puzzle area&rdquo;">
		</a>
		
		<figcaption>Having designed the top and bottom “joint plates” that go around the central “puzzle area”</figcaption>
		
	</figure></p>
<p>I did do several smaller arc tests (like I had made before) to figure out a good setting for the kerf on the joint plates so it would fit quit snugly inside the holes along the living hinge. I eventually settled on a kerf of <code>0.07mm</code> using a white piece of wood.</p>
<p>It took some wiggling, but the living hinge eventually fitted quite beautifully around the bottom joint plate <span class="kaomoji">(^▽^)</span>
</p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/living_hinge_bottom_joint_plate.jpg" data-size="820x608">
			
			<img src="../final-project/living_hinge_bottom_joint_plate.jpg"
				
				width="820"
				height="608"
				loading="lazy"
				alt="The living hinge fitted around the bottom joint plate">
		</a>
		
		<figcaption>The living hinge fitted around the bottom joint plate</figcaption>
		
	</figure></p>
<p>I couldn&rsquo;t find any other &ldquo;cheaper&rdquo; 3mm multiplex apart from the nice rustic wooden plates, and the living hinge was designed for 3mm thick wood. I therefore had to cut the top joint plate from the nice wood, even though that plate wouldn&rsquo;t even be visible from the outside once the full puzzle box was assembled. I did do some kerf tests again, and settled on using <code>0.09mm</code>.</p>
<p>After the laser was done and I&rsquo;d wiggled the other side of the holes around the joints, the living hinge circle had become quite a sturdy cylinder. Fellow student Phil recommended to use some wax or oil to rub into the living hinge&rsquo;s wood and that Michelle had recently done some tests. After she showed me the tests and where to find the oil, I took the Beeswax oil, and rubbed it along the wood, nicely darkening the rustic tint.</p>
<p><figure style="flex-grow: 108; flex-basis: 259px">
		<a href="../final-project/living_hinge_beeswax.jpg" data-size="500x462">
			
			<img src="../final-project/living_hinge_beeswax.jpg"
				
				width="500"
				height="462"
				loading="lazy"
				alt="Rubbing the living hinge with beeswax for protection and a darker color">
		</a>
		
		<figcaption>Rubbing the living hinge with beeswax for protection and a darker color</figcaption>
		
	</figure></p>
<p>While I was working on this I suddenly noticed that I&rsquo;d made a mistake in the top and bottom joint plates; the holes didn&rsquo;t align! I tried to see if it was just a matter of flipping a plate around, but that wasn&rsquo;t it. I knew this was a mistake that came from having made the living hinge in a different file than the joint plates. However, with the complexity of the living hinge (and how it already affected the performance of Fusion 360), I couldn&rsquo;t really have done it differently.</p>
<p>Comparing the actual plates with my design showed that I&rsquo;d offset the joints on the bottom plate one too far upward. The joints happened every 55mm. With 1175mm in circumference that meant I couldn&rsquo;t perfectly wrap it around, since <code>1175 / 55 = 21.36</code>, not a round number. However, that was a good thing, since I needed some extra space for the puzzle ear connections along both ends of the living hinge. I now realized that I&rsquo;d put that &ldquo;extra bit of space&rdquo;, that <code>0.36</code> of leftover space, just a little too far upwards.</p>
<p>After fixing my mistake, I cut out a new bottom joint plate, and this time the holes thankfully did align. I took the same piece of rustic 3mm multiplex to cut out the bottom of the full puzzle box; a circle of 380mm in diameter with 6 holes, quite simple. I also rubbed the bottom with beeswax.</p>
<p>I was really happy with the resulting wooden enclosure <span class="kaomoji">(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧</span>
 It reminded me of old radio sets that had such nice wooden exteriors.</p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/living_hinge_box_together.jpg" data-size="500x371">
			
			<img src="../final-project/living_hinge_box_together.jpg"
				
				width="500"
				height="371"
				loading="lazy"
				alt="The living hinge enclosure">
		</a>
		
		<figcaption>The living hinge enclosure</figcaption>
		
	</figure> <figure style="flex-grow: 131; flex-basis: 315px">
		<a href="../final-project/living_hinge_box_together_zoom.jpg" data-size="500x380">
			
			<img src="../final-project/living_hinge_box_together_zoom.jpg"
				
				width="500"
				height="380"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p>Only while in the metro back home did I remember that I forgot to take a bit of &ldquo;spacing&rdquo; into account to make the top joint plate fit around the acrylic puzzle plate. I&rsquo;d set a rather large kerf on the wooden plate, so I guessed the wooden plate wouldn&rsquo;t fit around the acrylic right now <span class="kaomoji">(╥﹏╥)</span>
</p>
<p>And indeed, as I tried to fit the wooden plate around the acrylic hexagon, it clearly wasn&rsquo;t big enough. Sanding down the edges of the wooden plate took quite some time; trying to see where it still wasn&rsquo;t fitting, where it needed to be sanded more, checking every minute if it was enough already (no, it wasn&rsquo;t), and repeat. But after about half an hour I was finally able to fit the wood around the acrylic, with it not being <em>too</em> tight of a fit.</p>
<p>I&rsquo;d bought some M5 60mm long sunken bolts to go into the bottom plate (and eventually connect it to the top plate) and my partner showed me how to turn the 6mm wide holes in the bottom plate into tapered holes with a special drilling head.</p>
<p><figure style="flex-grow: 140; flex-basis: 337px">
		<a href="../final-project/living_hinge_sunken_bolts.jpg" data-size="500x356">
			
			<img src="../final-project/living_hinge_sunken_bolts.jpg"
				
				width="500"
				height="356"
				loading="lazy"
				alt="Creating tapered holes for the sunken bolts">
		</a>
		
		<figcaption>Creating tapered holes for the sunken bolts</figcaption>
		
	</figure></p>
<p>I lowered the acrylic section (with the puzzle plate, the NeoPixel plate, and all the electronics) into the wood and it thankfully all fit together!</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/living_hinge_including_acrylic.jpg" data-size="500x500">
			
			<img src="../final-project/living_hinge_including_acrylic.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 158; flex-basis: 379px">
		<a href="../final-project/living_hinge_including_acrylic_side.jpg" data-size="500x316">
			
			<img src="../final-project/living_hinge_including_acrylic_side.jpg"
				
				width="500"
				height="316"
				loading="lazy"
				alt="The wooden enclosure around the internal puzzle area">
		</a>
		
		<figcaption>The wooden enclosure around the internal puzzle area</figcaption>
		
	</figure></p>
<h3 id="top-plate">Top Plate</h3>
<p>The last part of the wooden enclosure was the plate to go on the top, that had the outline of the puzzle cut out of the center. Because I didn&rsquo;t want any holes (for bolts to hold the top and bottom together) visible on the top of the wood I&rsquo;d bought <em>insert</em> nuts that had thread on the inside</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_inserts.jpg" data-size="350x350">
			
			<img src="../final-project/top_inserts.jpg"
				
				width="350"
				height="350"
				loading="lazy"
				alt="The insert nuts that can be screwed into wood and have thread on the inside">
		</a>
		
		<figcaption>The insert nuts that can be screwed into wood and have thread on the inside</figcaption>
		
	</figure></p>
<p>These nuts are 10mm high. I already had a 3mm plate, the top joint plate, into which these inserts would be screwed, however I needed at least 7mm on top of it. Preferably several millimeters more so I&rsquo;d not run the risk of seeing the insert come out the other side of the wood because I&rsquo;d screwed them in too far.</p>
<p>In short, I already wanted a thick top plate because I felt that it would look nice, I now also <em>needed</em> it to fit the inserts.</p>
<p>I first thought about milling the top plate from a 12mm thick multiplex plate. However, the odd shapes of my puzzle ears meant that I&rsquo;d need <em>really</em> small milling bit. I therefore wanted to investigate the laser cutter first.</p>
<h4 id="laser-cutting-the-top-plate">Laser Cutting the Top Plate</h4>
<p>I took a piece of 12mm leftover multiplex wood from what we&rsquo;d used during the &ldquo;Computer-Controlled Machining&rdquo; week. I had no idea what settings to use. The thickest piece of reference wood was only 4mm thick. I started with a speed of 10, max power of 100% and min power of 25%. I truly wasn&rsquo;t sure if the wood would start to burn, so I kept my hand over the <em>STOP</em> button during the entire time. Thankfully, no fire started.</p>
<p>It didn&rsquo;t cut through fully. Using a piece of paper I could measure that the cut went 9mm deep. Using a speed of 5 went nicely through it. I also tried doing two passes with a speed of 10. However, that charred the inside a whole lot more, making the wood look a lot less nice. I therefore knew that multiple passes weren&rsquo;t an option.</p>
<p>I did get a large burn shadow on top of the wood with those settings. To try and reduce it I covered the top with painters tape, which did stop some of the burns, but not all, and it made it look rather uneven.</p>
<p><figure style="flex-grow: 170; flex-basis: 409px">
		<a href="../final-project/top_painters_tape_test.jpg" data-size="500x293">
			
			<img src="../final-project/top_painters_tape_test.jpg"
				
				width="500"
				height="293"
				loading="lazy"
				alt="Masking the top with a layer of painters tape to reduce burn marks">
		</a>
		
		<figcaption>Masking the top with a layer of painters tape to reduce burn marks</figcaption>
		
	</figure> <figure style="flex-grow: 162; flex-basis: 390px">
		<a href="../final-project/top_12mm_tests.jpg" data-size="500x307">
			
			<img src="../final-project/top_12mm_tests.jpg"
				
				width="500"
				height="307"
				loading="lazy"
				alt="Some of the 9mm and 12mm tests">
		</a>
		
		<figcaption>Some of the 9mm and 12mm tests</figcaption>
		
	</figure></p>
<p>I also made a tiny test of some puzzle ears. The laser could cut through, but it wasn&rsquo;t a really nice result. I therefore tried the same tests with a 9mm thick sheet of multiplex. Using a speed of 8, max power of 100% and min power of 25% could cut through. I was surprised that it was about the same as the 12mm sheet. Perhaps the 9mm wood was a bit harder?</p>
<p>However, all the tests didn&rsquo;t look very nice. The burn shadows on the top and the blackness of the sides weren&rsquo;t what I wanted.</p>
<p>I therefore made a change to my design. The lab didn&rsquo;t have the nice looking wood I&rsquo;d used for my living hinge in a thicker size than 3mm. However, I saw online that I could get 5.5mm hardwood multiplex (which I&rsquo;d guessed was the material I&rsquo;d used for my living hinge) at the Gamma, the local home depot. Perhaps I could use two of these layers, one with the puzzle outline, which would then lie flush with the 5mm thick puzzle pieces, and another layer on top with a wider hexagon taken out of the inside, which would add to the thickness I required for the inserts.</p>
<p><figure style="flex-grow: 134; flex-basis: 323px">
		<a href="../final-project/top_new_laser_design_fusion360.jpg" data-size="820x609">
			
			<img src="../final-project/top_new_laser_design_fusion360.jpg"
				
				width="820"
				height="609"
				loading="lazy"
				alt="Adjusting the design of the top plate into two 5.5mm high plates">
		</a>
		
		<figcaption>Adjusting the design of the top plate into two 5.5mm high plates</figcaption>
		
	</figure></p>
<p>The next morning I bought a 5.5mm (and 9mm plate, which I&rsquo;ll get back to later) wooden plate of 61cm x 122cm at the Gamma (my partner helped with carrying it for the section we had to bike before reaching public transport), which would give me three tries to create the two plates.</p>
<p>I started with a bunch of tests to figure out the settings that would cut through the wood from the top-left to the bottom-right section, what the kerf was, what kerf would work well with my actual puzzle pieces. I was really surprised that at first I had to use a speed of 6, max power of 100% and min power of 30% to even cut through the 5.5mm sheet. That was what I&rsquo;d needed for the 12mm multiplex! <span class="kaomoji">(●__●)</span>
 I guess the hardwood, which was only a veneer on the top and bottom, was giving the laser a hard time, because the inside of the wood looked absolutely <em>charred deep black</em>. It looked even worse than the 9mm and 12mm tests from before&hellip; <span class="kaomoji">(◎_◎;)</span>
</p>
<p>I did manage to almost set my wood on fire while I was doing tests in the bottom-right corner. I was having trouble getting through the wood, and did a second test of a tiny rectangle at almost the same place as the first test. The place where the lines of the first rectangle and second rectangle intersected started smoldering <span class="kaomoji">(⑉⊙ȏ⊙)</span>
 Henk was at the scene quickly and shut down the laser cutter, stopping the flow of air, which let the smoldering die down.</p>
<p>Henk said I should pay more attention to really getting the focus even along the whole area. Using the <em>Frame</em> button for a dozen times together with the wooden stick we use to set the focus, I kept checking if the distance between the wood and the laser was correct, placing more and more weights along the sides to push down the wood.</p>
<p><figure style="flex-grow: 116; flex-basis: 279px">
		<a href="../final-project/top_evening_wood.jpg" data-size="500x429">
			
			<img src="../final-project/top_evening_wood.jpg"
				
				width="500"
				height="429"
				loading="lazy"
				alt="Using lots of weights to even out the wooden plate">
		</a>
		
		<figcaption>Using lots of weights to even out the wooden plate</figcaption>
		
	</figure></p>
<p>Eventually I felt that the focus was good along the whole area. I started with engraving the spirograph into the wood. The examples hanging next to the laser cutter showed me that etching the full area, as I&rsquo;d done for the puzzle pieces, looked darn ugly with wood. I therefore figured I&rsquo;d increase the DPI so much that the laser would only &ldquo;hatch&rdquo; the pattern. I did a quick test on a tiny rectangle with a DPI of 20 which looked quite nice.</p>
<p>Using a speed of 25, max power of 25% and min power of 10%, plus a DPI of 20, and a <em>Scan Angle</em> of 45°, I had the spirograph hatched into the wood. I was really happy with this result, which would be the only thing I&rsquo;d be happy with during the remaining process of using the laser cutter for the top plate&hellip;</p>
<p><figure style="flex-grow: 115; flex-basis: 276px">
		<a href="../final-project/top_spirograph_etched.jpg" data-size="500x434">
			
			<img src="../final-project/top_spirograph_etched.jpg"
				
				width="500"
				height="434"
				loading="lazy"
				alt="The spirographs hatched into the wood">
		</a>
		
		<figcaption>The spirographs hatched into the wood</figcaption>
		
	</figure> <figure style="flex-grow: 133; flex-basis: 320px">
		<a href="../final-project/top_spirograph_etched_zoom.jpg" data-size="500x375">
			
			<img src="../final-project/top_spirograph_etched_zoom.jpg"
				
				width="500"
				height="375"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure></p>
<p>The next step was to cut out the puzzle pieces, the holes for the inserts, and the outside circle. To protect the cut of the puzzle ears, which was the only area truly visible in the end, I taped the path with painters tape. I used a speed of 9, max power of 100% and min power of 25%, plus a kerf of&hellip;.. 1mm!</p>
<p><figure style="flex-grow: 101; flex-basis: 243px">
		<a href="../final-project/top_painters_tape.jpg" data-size="500x493">
			
			<img src="../final-project/top_painters_tape.jpg"
				
				width="500"
				height="493"
				loading="lazy"
				alt="Trying to protect the top from burn marks with painters tape">
		</a>
		
		<figcaption>Trying to protect the top from burn marks with painters tape</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_painters_tape_cut.jpg" data-size="500x500">
			
			<img src="../final-project/top_painters_tape_cut.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The result after the cutting was done">
		</a>
		
		<figcaption>The result after the cutting was done</figcaption>
		
	</figure></p>
<p>My very early tests had shown that I&rsquo;d needed an insane kerf of 1mm to make the puzzle pieces fit well. But I guess I had the focus wrong at that time, or did something else wrong, because I already noticed during the cut of the puzzle that the ears looked too off. When I cleaned some soot from the sides of the plate and tried to fit a puzzle piece in, it was <em>much</em> too big <span class="kaomoji">o(╥﹏╥)o</span>
</p>
<p>Another thing that I noticed was that this wood was splintering like <em>crazy</em>! It didn&rsquo;t just splinter along the sides, as I pulled away the painters tape, it took away splinters from the top as well. And painters tape isn&rsquo;t even that sticky! Trying to sand the wood only resulted on an endless barrage of splinters, as you sanded splinters away, new ones would pop up continuously <span class="kaomoji">( ≧Д≦)</span>
</p>
<p>Well, that was my one &ldquo;failure&rdquo; option I had for this board&hellip;</p>
<p>I set up everything again to cut out the plate again, using a kerf of 0.1 this time. I wasn&rsquo;t quite sure if that would be ok, but I wasn&rsquo;t trusting my tests anymore either. After the laser was done I tried to properly clean some of the black soot from the sides, enough to not make it smudge my puzzle pieces (too much). I also did a bit of sanding to try and reduce the splinters and finally rubbed it with beeswax. All of this turned the plate into a much darker and grey-ish piece of wood. It wasn&rsquo;t necessarily bad, but the terrible charring of the sides, and the constant roughness and tiny splinters coming from the wood hadn&rsquo;t made this a success.</p>
<p><figure style="flex-grow: 122; flex-basis: 294px">
		<a href="../final-project/top_laser_cut_puzzle_pieces_1.jpg" data-size="500x407">
			
			<img src="../final-project/top_laser_cut_puzzle_pieces_1.jpg"
				
				width="500"
				height="407"
				loading="lazy"
				alt="The puzzle pieces thankfully fitted into the wood, only just">
		</a>
		
		<figcaption>The puzzle pieces thankfully fitted into the wood, only just</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_laser_cut_puzzle_pieces_2.jpg" data-size="500x500">
			
			<img src="../final-project/top_laser_cut_puzzle_pieces_2.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="Testing the plates on the actual puzzle enclosure">
		</a>
		
		<figcaption>Testing the plates on the actual puzzle enclosure</figcaption>
		
	</figure></p>
<p>The simple top plate thankfully went correctly in the first go (no kerf that might mess things up). I cleaned, sanded and waxed it the same as the first plate.</p>
<p>I now had <em>something</em> that <em>could</em> potentially work (although I&rsquo;d still needed to align these wooden layers perfectly with the puzzle bottom layer so the puzzle pieces would be placed correctly, so it could still go horribly wrong later). But I wasn&rsquo;t very happy, it just didn&rsquo;t look good enough, especially since this was the top section, not something partially hidden away.</p>
<h4 id="milling-the-top-plate">Milling the Top Plate</h4>
<p>Henk had found some 1mm milling bits that were 10mm long the day before. I felt that 1mm in diameter <em>could</em> work for milling the puzzle ears. I&rsquo;d therefore also bought a 9mm thick hardwood multiplex sheet at the Gamma, in case the laser cutting results weren&rsquo;t good enough. The 9mm plate together with the 3mm plate below it would only give me a 12mm thick plate in total for the 10mm <em>inserts</em>, so I&rsquo;d probably not screw in the inserts all the way.</p>
<p>I figured I would use a 3mm ballhead mill to lightly carve out the spirograph from the top. Then use the 1mm flathead milling bit to slowly mill out the puzzle ears, and finally use the 5mm flathead milling bit to mill out the outside circle.</p>
<p>Milling the spirograph design meant that I had to import it into Fusion 360 to combine with the rest of the top plate. I did have to use some very specific offsets and scales to (hopefully) align it to my project.</p>
<p><figure style="flex-grow: 162; flex-basis: 388px">
		<a href="../final-project/top_importing_spirograph.jpg" data-size="820x506">
			
			<img src="../final-project/top_importing_spirograph.jpg"
				
				width="820"
				height="506"
				loading="lazy"
				alt="Odd settings to use to import my spirograph into Fusion 360">
		</a>
		
		<figcaption>Odd settings to use to import my spirograph into Fusion 360</figcaption>
		
	</figure></p>
<p>I used the steps outlined in my &ldquo;<a class="link" href="../blog/week-7/#vcarve-pro" >Computer-Controlled Machining</a>&rdquo; week to set-up the toolpaths for the ShopBot in VCarve Pro. I wasn&rsquo;t quite sure what speeds and feed rates to use for the top spirograph and what allowance to use for the puzzle pieces. I therefore created a few test circles and set each to a different combination of speeds and feed rates.</p>
<p>However, I started with 6 holes to screw the wooden plate to the sacrificial layer. To operate the ShopBot I followed the steps I wrote down in my &ldquo;<a class="link" href="../blog/week-7/#cnc-milling" >Computer-Controlled Machining</a>&rdquo; week.</p>
<p><figure style="flex-grow: 73; flex-basis: 176px">
		<a href="../final-project/top_vcarve_setup.jpg" data-size="500x679">
			
			<img src="../final-project/top_vcarve_setup.jpg"
				
				width="500"
				height="679"
				loading="lazy"
				alt="Setting up test path & the top plate in VCarve Pro">
		</a>
		
		<figcaption>Setting up test path &amp; the top plate in VCarve Pro</figcaption>
		
	</figure> <figure style="flex-grow: 157; flex-basis: 378px">
		<a href="../final-project/top_setup_wood.jpg" data-size="600x380">
			
			<img src="../final-project/top_setup_wood.jpg"
				
				width="600"
				height="380"
				loading="lazy"
				alt="Having milled the drilling holes and screwed the wood to the bed">
		</a>
		
		<figcaption>Having milled the drilling holes and screwed the wood to the bed</figcaption>
		
	</figure></p>
<p>Next, I switched to the 3mm ballhead milling bit and did the circle tests. I didn&rsquo;t see much difference, each resulted in quite rough surfaces with lots of &ldquo;fuzz&rdquo; that had to be sanded off.</p>
<p><figure style="flex-grow: 289; flex-basis: 695px">
		<a href="../final-project/top_speed_feed_rate_tests_raw.jpg" data-size="820x283">
			
			<img src="../final-project/top_speed_feed_rate_tests_raw.jpg"
				
				width="820"
				height="283"
				loading="lazy"
				alt="Testing different spindle speeds and feed rates with the 3mm ">
		</a>
		
		<figcaption>Testing different spindle speeds and feed rates with the 3mm</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 298; flex-basis: 715px">
		<a href="../final-project/top_speed_feed_rate_tests_filed.jpg" data-size="820x275">
			
			<img src="../final-project/top_speed_feed_rate_tests_filed.jpg"
				
				width="820"
				height="275"
				loading="lazy"
				alt="After filing the edges they all looked quite similar">
		</a>
		
		<figcaption>After filing the edges they all looked quite similar</figcaption>
		
	</figure></p>
<p>I decided to use a spindle speed of 16k (somewhat random) and a feed rate of <code>10mm/s</code>, because I did feel that slower created somewhat better rounded circles. In VCarve I selected the <em>2D Profile Toolpath</em>, set the depth to 1.5mm, so only 1 pass. For the <em>Machine Vectors</em> I did <em>On</em>, since I wanted to carve out the line exactly.</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='top_spirograph_timelapse.mp4' type="video/mp4"></video>
     
    
    <figcaption>Timelapse of cutting the puzzle pieces</figcaption>
    
</figure>
<p>It was rather fun to see the milling machine carve out the spirograph. Although the sound was awful, a really high scraping sound. I think because the ballhead doesn&rsquo;t really have (good) knives on the top 1.5mm ball side, so it wasn&rsquo;t cutting that smoothly?</p>
<p>When the machine was done, I was left with a lovely spirograph design, which still needed quite some effort to properly, but gently, sand away the wood fuzz along all the lines. Thankfully though, this wooden sheet was <em>much</em> better than the 5.5mm sheet I used before on the laser cutter. This one didn&rsquo;t splinter that easily.</p>
<p><figure style="flex-grow: 133; flex-basis: 320px">
		<a href="../final-project/top_spirograph_raw.jpg" data-size="820x615">
			
			<img src="../final-project/top_spirograph_raw.jpg"
				
				width="820"
				height="615"
				loading="lazy"
				alt="The spirograph still needed quite some (gentle) sanding">
		</a>
		
		<figcaption>The spirograph still needed quite some (gentle) sanding</figcaption>
		
	</figure></p>
<p><figure style="flex-grow: 140; flex-basis: 338px">
		<a href="../final-project/top_spirograph_filed_zoom.jpg" data-size="820x582">
			
			<img src="../final-project/top_spirograph_filed_zoom.jpg"
				
				width="820"
				height="582"
				loading="lazy"
				alt="After having sanded all edges">
		</a>
		
		<figcaption>After having sanded all edges</figcaption>
		
	</figure></p>
<p>I switched to the tiny 1mm flathead milling bit. Henk had advised me to set the spindle speed as fast as possible, 18k on our ShopBot. I didn&rsquo;t yet know what feed rate to use though. Slower was better, but too slow and I&rsquo;d need more time than was left in the day. I also didn&rsquo;t know what <em>Allowance offset</em> to set for the path to make it truly fit the acrylic puzzle pieces.</p>
<p>I started out with using the <em>Allowance offset</em> that we&rsquo;d used for the 5mm flathead, <code>-0.3mm</code> and a feed rate of <code>10mm/s</code>.</p>
<p>As it was slowly carving out my test piece I thought I heard something while it was at around 6mm depth. I couldn&rsquo;t really see though due to the dust skirt around the milling head. When the milling head did another pass, I heard a quick metal-on-metal sound and knew that the milling head must be broken and the head had just scraped the broken milling bit again. I stopped the job and as I moved the milling head out of the way I could see that the milling bit had broken in the corner of one puzzle ear.</p>
<p><figure style="flex-grow: 183; flex-basis: 440px">
		<a href="../final-project/top_1mm_broken.jpg" data-size="600x327">
			
			<img src="../final-project/top_1mm_broken.jpg"
				
				width="600"
				height="327"
				loading="lazy"
				alt="The broken 1mm milling bit sticking from the wood">
		</a>
		
		<figcaption>The broken 1mm milling bit sticking from the wood</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_1mm_broken_head.jpg" data-size="500x500">
			
			<img src="../final-project/top_1mm_broken_head.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The second milling bit broken">
		</a>
		
		<figcaption>The second milling bit broken</figcaption>
		
	</figure></p>
<p>I halved the speed to <code>5mm/s</code>, switched to a new 1mm milling head, z-aligned again, and let the machine start on another puzzle piece test. Sadly, around 8.3mm depth I heard a noise again which I now knew was the breaking of the milling bit <span class="kaomoji">ಥ_ಥ</span>
 I figured I&rsquo;d give it <em>one</em> more try at <code>2.5mm/s</code> since at <code>5mm/s</code> it had been <em>so</em> close to fully cutting through the wood. Sadly, again at 8.3mm depth it broke as well <span class="kaomoji">o(╥﹏╥)o</span>
</p>
<p><figure style="flex-grow: 239; flex-basis: 573px">
		<a href="../final-project/top_milling_tests.jpg" data-size="820x343">
			
			<img src="../final-project/top_milling_tests.jpg"
				
				width="820"
				height="343"
				loading="lazy"
				alt="All the milling tests">
		</a>
		
		<figcaption>All the milling tests</figcaption>
		
	</figure></p>
<p>Milling a 9mm thick sheet using a 1mm milling bit just wasn&rsquo;t going to work, the friction from the walls as the milling bit went deeper just became too much.</p>
<p>It felt wasteful to leave that spirograph etched into the wood, so I just milled it out of the plate. I wasn&rsquo;t quite sure what to do with it, but I figured I&rsquo;d find a use for it later (it became the bottom plate eventually!). The ShopBot software crashed on me as I finished the z-leveling of the 5mm flathead mill. Thankfully I&rsquo;d taken a photo of the zero-point that I&rsquo;d set for my job, so I could easily set it up again, pfew!</p>
<p><figure style="flex-grow: 136; flex-basis: 327px">
		<a href="../final-project/top_spirograph_circle.jpg" data-size="820x601">
			
			<img src="../final-project/top_spirograph_circle.jpg"
				
				width="820"
				height="601"
				loading="lazy"
				alt="Having milled out the spirograph, without any puzzle outlines">
		</a>
		
		<figcaption>Having milled out the spirograph, without any puzzle outlines</figcaption>
		
	</figure></p>
<p>Since I had space to mill out two more circles, I decided to mill out another circle with a large hexagon taken out of it. Perhaps this could function as the top layer, although I&rsquo;d still need a wooden layer below with the actual puzzle outlines.</p>
<p><figure style="flex-grow: 156; flex-basis: 375px">
		<a href="../final-project/top_wood_fuzz.jpg" data-size="500x320">
			
			<img src="../final-project/top_wood_fuzz.jpg"
				
				width="500"
				height="320"
				loading="lazy"
				alt="The wood &ldquo;fuzz&rdquo; left along the edges after the milling">
		</a>
		
		<figcaption>The wood “fuzz” left along the edges after the milling</figcaption>
		
	</figure> <figure style="flex-grow: 128; flex-basis: 307px">
		<a href="../final-project/top_9mm_outer_layer.jpg" data-size="500x390">
			
			<img src="../final-project/top_9mm_outer_layer.jpg"
				
				width="500"
				height="390"
				loading="lazy"
				alt="A possible top layer">
		</a>
		
		<figcaption>A possible top layer</figcaption>
		
	</figure></p>
<p>As a quick test I placed the 9mm sheet in the laser cutter and used the highest setting that I was comfortable with; speed of 9, max power at 100% and min power at 25% to see what would happen. It cut 7mm deep. So no laser cutting on this wooden sheet it seemed.</p>
<p>Instead I placed another sheet of that lovely 3mm dark wood that I&rsquo;d used for the living hinge into the laser cutter. I did a few tests to see what kerf to use for the puzzle pieces to fit. It seemed that <code>0.07mm</code> was a good match. Making sure that the wooden sheet was pushed down along the full circle, using weights and duck tape, I first engraved the spirograph into the wood (using a speed of 25, max power of 15% and min power of 10%). I then cut out the puzzle pieces, as well as some holes (6 for the insert nuts, and 6 to wrap around the bolt heads that stuck out from the acrylic plates).</p>
<p>However, after it was done and fitted my puzzle pieces they didn&rsquo;t fit! <span class="kaomoji">✖_✖</span>
 It was <em>just</em> a bit too tight. Strange, I&rsquo;d checked the kerf before right? Had I accidentally set the kerf in a different layer, but did my test with 0 kerf instead? I did another test with 0 kerf and compared it with my original test using the caliper. It was <em>exactly</em> the same. I guess I had done the original test at 0 kerf after all&hellip;.</p>
<p>Sad that I&rsquo;d now wasted a nice piece of wood, I set everything up again on a different section of the wooden sheet. Did the spirograph, did the cuts (at 0 kerf) and thankfully, this time the puzzle pieces fitted nicely (amazing that a difference of 0.07mm can make such a difference!)</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_3mm_puzzle_layer.jpg" data-size="500x500">
			
			<img src="../final-project/top_3mm_puzzle_layer.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The (first) top layer that holds the puzzle outlines">
		</a>
		
		<figcaption>The (first) top layer that holds the puzzle outlines</figcaption>
		
	</figure></p>
<p>The circle-with-missing-inner-hexagon that I&rsquo;d milled out of the 9mm plate had its hexagon too big to hide the holes of the plate in the image above (the ones around the bolt heads). I therefore milled one more possible top plate out of the 9mm sheet that would fall over those holes. It did mean that I&rsquo;d first have to mill the hexagon shape from the wood.</p>
<p><figure style="flex-grow: 118; flex-basis: 283px">
		<a href="../final-project/top_9mm_second_design.jpg" data-size="500x423">
			
			<img src="../final-project/top_9mm_second_design.jpg"
				
				width="500"
				height="423"
				loading="lazy"
				alt="The new design for a possible top plate out of the 9mm sheet">
		</a>
		
		<figcaption>The new design for a possible top plate out of the 9mm sheet</figcaption>
		
	</figure> <figure style="flex-grow: 131; flex-basis: 316px">
		<a href="../final-project/top_9mm_second_design_milled.jpg" data-size="600x455">
			
			<img src="../final-project/top_9mm_second_design_milled.jpg"
				
				width="600"
				height="455"
				loading="lazy"
				alt="After the milling was done">
		</a>
		
		<figcaption>After the milling was done</figcaption>
		
	</figure></p>
<p>Sadly, this section of the wooden plate had faired a bit worse from the milling, along the sides many big chunks of wood were missing from the top, and the spirograph sections still remaining along the outline looked much less nice that my previous result.</p>
<p>When I placed it on my puzzle box I knew that this wasn&rsquo;t it, it didn&rsquo;t mesh well with the layer below it (plus that I wasn&rsquo;t happy with the quality).</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_9mm_second_design_placed.jpg" data-size="500x500">
			
			<img src="../final-project/top_9mm_second_design_placed.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt="The 9mm thick sheet on top of the 3mm wooden sheet">
		</a>
		
		<figcaption>The 9mm thick sheet on top of the 3mm wooden sheet</figcaption>
		
	</figure></p>
<p>I therefore laser cut two more circles from the 3mm wood, each with a hexagon that was increasingly larger (but covering any potential holes). This left me with two possibilities on how the final top could look; either layer the 3 sheets of 3mm on top of each other, or replacing the top layer with the 9mm thick circle that I had milled before (that had a bigger hexagonal hole than the spirograph).</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_3_layers_3mm.jpg" data-size="600x600">
			
			<img src="../final-project/top_3_layers_3mm.jpg"
				
				width="600"
				height="600"
				loading="lazy"
				alt="Using three layers of the 3mm wood">
		</a>
		
		<figcaption>Using three layers of the 3mm wood</figcaption>
		
	</figure> <figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/top_3_layers_9mm.jpg" data-size="600x600">
			
			<img src="../final-project/top_3_layers_9mm.jpg"
				
				width="600"
				height="600"
				loading="lazy"
				alt="Having a top layer of the 9mm wood">
		</a>
		
		<figcaption>Having a top layer of the 9mm wood</figcaption>
		
	</figure></p>
<p>Eventually, I decided to go for the 3mm top layer, it just better fit with the other two 3mm layers below it.</p>
<p>Because I had to use the insert nuts in the top layers I had to glue them together, using wood glue. Due to the size of the circles and my lack of enough/big enough glue clamps I instead created a big tower of my heaviest books on top of the plates.</p>
<p><figure style="flex-grow: 74; flex-basis: 179px">
		<a href="../final-project/top_glueing_tower.jpg" data-size="500x667">
			
			<img src="../final-project/top_glueing_tower.jpg"
				
				width="500"
				height="667"
				loading="lazy"
				alt="A tower of (dataviz) books on top of the wooden plates to glue">
		</a>
		
		<figcaption>A tower of (dataviz) books on top of the wooden plates to glue</figcaption>
		
	</figure></p>
<p>Once I had three layers of the 3mm wood glued together, creating a stack of 9mm high, did I screw in the inserts. My partner helped me to make sure the inserts were going in as vertical as possible</p>
<p><figure style="flex-grow: 139; flex-basis: 334px">
		<a href="../final-project/top_insert_nut_top.jpg" data-size="500x359">
			
			<img src="../final-project/top_insert_nut_top.jpg"
				
				width="500"
				height="359"
				loading="lazy"
				alt="Having added insert nuts">
		</a>
		
		<figcaption>Having added insert nuts</figcaption>
		
	</figure> <figure style="flex-grow: 170; flex-basis: 408px">
		<a href="../final-project/top_insert_nut_bottom.jpg" data-size="500x294">
			
			<img src="../final-project/top_insert_nut_bottom.jpg"
				
				width="500"
				height="294"
				loading="lazy"
				alt="How it looks from the bottom">
		</a>
		
		<figcaption>How it looks from the bottom</figcaption>
		
	</figure></p>
<p>I had calculated that the 60mm bolts would be <em>just</em> a bit too long, and after an actual check I saw that I&rsquo;d need to remove 3mm from all the bolts.</p>
<p><figure style="flex-grow: 203; flex-basis: 488px">
		<a href="../final-project/top_bolts_too_long.jpg" data-size="820x403">
			
			<img src="../final-project/top_bolts_too_long.jpg"
				
				width="820"
				height="403"
				loading="lazy"
				alt="My 60mm were (expectedly) 2-3mm too long">
		</a>
		
		<figcaption>My 60mm were (expectedly) 2-3mm too long</figcaption>
		
	</figure></p>
<p>I asked my partner to do the actual sawing of the bolts, because I appear to be dreadfully bad at sawing (using a drill also).</p>
<p>With the bolts now at the correct length I glued on the top layer to hide the insert holes, and after drying for a few hours, put it all together again.</p>
<p><figure style="flex-grow: 136; flex-basis: 326px">
		<a href="../final-project/top_final_choice.jpg" data-size="820x602">
			
			<img src="../final-project/top_final_choice.jpg"
				
				width="820"
				height="602"
				loading="lazy"
				alt="The look of thee puzzle box with the final top layer glued on, hiding the inserts">
		</a>
		
		<figcaption>The look of thee puzzle box with the final top layer glued on, hiding the inserts</figcaption>
		
	</figure></p>
<h4 id="lid">Lid</h4>
<p>With the three levels of the ±3mm wood on top of each other, it suddenly became clear to me that I could use the inner hexagon that was cut out as a lid for the whole box.</p>
<p>However, with the hexagon perfectly fitting into the top hexagon, it was a bit hard to take out. I therefore cut out part of a circle from it.</p>
<p>To be able to re-align the wooden lid in the laser, I first taped a piece of paper to the bed and had the hexagon shape cut into it. I didn&rsquo;t need the circle to take out to be <em>perfectly</em> aligned, so doing it with paper this way was more than enough.</p>
<p>I then placed my wooden lid on top of the paper, and had the circular &ldquo;bite&rdquo; taken out.</p>
<p><figure style="flex-grow: 109; flex-basis: 263px">
		<a href="../final-project/lid_aligning_laser.jpg" data-size="500x455">
			
			<img src="../final-project/lid_aligning_laser.jpg"
				
				width="500"
				height="455"
				loading="lazy"
				alt="Using paper to be to (re-)align the lid">
		</a>
		
		<figcaption>Using paper to be to (re-)align the lid</figcaption>
		
	</figure> <figure style="flex-grow: 176; flex-basis: 424px">
		<a href="../final-project/lid_piece_removed.jpg" data-size="500x283">
			
			<img src="../final-project/lid_piece_removed.jpg"
				
				width="500"
				height="283"
				loading="lazy"
				alt="The little missing &ldquo;bite&rdquo; from the lid">
		</a>
		
		<figcaption>The little missing “bite” from the lid</figcaption>
		
	</figure></p>
<p>And with that the physical exterior of my final project was finally done! <span class="kaomoji">(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧</span>
</p>
<h2 id="programming">Programming</h2>
<p>To be able to program my ATtiny3216, and read out the Serial Monitor, while the puzzle was upright and closed, I added some Male-Female jumper wires to the UPDI and FTDI header pins on my board. For the UPDI I connected wires to both the <em>GND</em> (white) and <em>UPDI</em> (yellow) pins, while for the FTDI I only connected wires to <em>GND</em> (black) and the <em>RX</em> (blue) line, since I would now power my board with the 5V adapter, and I only needed to read out my board.</p>
<p>Quite handy, those holes in my living hinge design, which allowed me to poke the wires outside.</p>
<p><figure style="flex-grow: 96; flex-basis: 231px">
		<a href="../final-project/program_wires_outside.jpg" data-size="500x518">
			
			<img src="../final-project/program_wires_outside.jpg"
				
				width="500"
				height="518"
				loading="lazy"
				alt="Adding two wires to the UPDI and FTDI header pins to connect my UPDI and FTDI to and program the puzzle">
		</a>
		
		<figcaption>Adding two wires to the UPDI and FTDI header pins to connect my UPDI and FTDI to and program the puzzle</figcaption>
		
	</figure></p>
<p>Now that I had to make my NeoPixels and puzzle contacts work together, I adjusted my map of the NeoPixel grid to include the puzzle pieces. Next, I assigned each NeoPixel to one of these puzzle pieces. I decided to assign a NeoPixel to only 1 puzzle piece, even if it was along a puzzle edge. A true 50/50 split between two puzzle pieces didn&rsquo;t happen very often, usually the NeoPixel would lie mostly below one piece.</p>
<p><figure style="flex-grow: 90; flex-basis: 217px">
		<a href="../final-project/program_puzzle_id.png" data-size="820x903">
			
			<img src="../final-project/program_puzzle_id.png"
				
				width="820"
				height="903"
				loading="lazy"
				alt="Each puzzle piece got an ID, and each NeoPixel got assigned to one puzzle ID">
		</a>
		
		<figcaption>Each puzzle piece got an ID, and each NeoPixel got assigned to one puzzle ID</figcaption>
		
	</figure></p>
<p>Thankfully, the <code>megaTinyCore</code> library had been updated to version 2.3.2 that saw a major increase in the uploading speed, which was perfectly timed for me, and which I was immensely grateful for.</p>
<p>I did have to choose the <em>SLOW</em> setting of the <em>Serial-UPDI</em> versions of the <em>Programmer</em>, because the upload would always crash with the faster versions (I&rsquo;d get <code>Error with stxxxxx</code> kinds of errors otherwise at a random point during the upload). However, this version was still way faster than the old uploader from the previous <code>megaTinyCore</code> version.</p>
<p><figure style="flex-grow: 220; flex-basis: 528px">
		<a href="../final-project/program_megatinycore_programmer.png" data-size="498x226">
			
			<img src="../final-project/program_megatinycore_programmer.png"
				
				width="498"
				height="226"
				loading="lazy"
				alt="The programmer I had to choose for my UPDI to work">
		</a>
		
		<figcaption>The programmer I had to choose for my UPDI to work</figcaption>
		
	</figure></p>
<p>I checked if there were perhaps other libraries that worked with NeoPixels besides the <code>AdaFruit_NeoPixel</code> library I&rsquo;d been using till now, and found the <a class="link" href="https://github.com/FastLED/FastLED"  target="_blank" rel="noopener"
    ><code>FastLed</code></a> library. This seemed like a great library, because it has more advanced functionality and options than the AdaFruit library. Sadly though, it doesn&rsquo;t work for the ATtiny Series-0 and Series-1, even with <code>megaTinyCore</code>. I tried compiling the most simple of programs, but it failed indeed (and found <a class="link" href="http://fab.academany.org/2020/labs/kannai/students/tatsuro-homma/assignment/week11.html"  target="_blank" rel="noopener"
    >other students</a> that also tried with the new ATtiny&rsquo;s and failed).</p>
<p>I did discover that <code>megaTinyCore</code> has its own version of the AdaFruit library that&rsquo;s optimized for the ATtiny&rsquo;s! I&rsquo;m therefore now using the <a class="link" href="https://github.com/SpenceKonde/megaTinyCore/blob/master/megaavr/extras/tinyNeoPixel.md"  target="_blank" rel="noopener"
    ><code>tinyNeoPixel_Static</code></a> library. There are a few tiny differences in how the library is initialized. You can create a strip with:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define led_count 217
</span><span class="cp"></span><span class="n">byte</span> <span class="n">pixels</span><span class="p">[</span><span class="n">led_count</span> <span class="o">*</span> <span class="mi">3</span><span class="p">];</span>
<span class="n">tinyNeoPixel</span> <span class="n">strip</span> <span class="o">=</span> <span class="n">tinyNeoPixel</span><span class="p">(</span><span class="n">led_count</span><span class="p">,</span> <span class="n">pin_NEO</span><span class="p">,</span> <span class="n">NEO_GRB</span><span class="p">,</span> <span class="n">pixels</span><span class="p">);</span>
</code></pre></div><p>And you need to specifically set <code>pinMode(pin_NEO, OUTPUT)</code> instead of using <code>strip.begin()</code> as you do with the original <code>AdaFruit_NeoPixel</code> library. With the <code>tinyNeoPixel</code> library you can set the clock speed back to 20Mhz, instead of the 16MHz that had to be used before. It also reports the Global-variable-used SRAM accurately (which the original library doesn&rsquo;t).</p>
<h3 id="splitting-the-code">Splitting the Code</h3>
<p>I wanted to bring my NeoPixel and the PCA9555D code together. However, the main <code>.ino</code> file was getting quite big. I instead preferred to have most of the NeoPixel code and functions and the PCA9555D code and functions in separate files and only call those functions from the main file.</p>
<p>I had no idea how to split code and be able to access both functions and global variables across files though. After searching online I found that you can put code in other files, preferably with a file type of <code>.cpp</code> (for <em>C++</em>), and use a <em>header</em> file, with a file type of <code>.h</code> that contains any function (and variable) declarations. I won&rsquo;t go into the details, and I can&rsquo;t share a specific page that explained it all to me. Instead I slowly gathered the knowledge from many different pages.</p>
<p>One thing that I do want to point out is the use of <code>extern</code>, which I found to be <em>the</em> way to share variables across files. I created one &ldquo;base&rdquo; header file in which I would <em>declare</em> any variable that I needed across files, such as:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c">  <span class="c1">//Pins  
</span><span class="c1"></span>  <span class="cp">#define num_pieces 38
</span><span class="cp"></span>  <span class="k">extern</span> <span class="n">byte</span> <span class="n">pin_state</span><span class="p">[];</span>
  <span class="k">extern</span> <span class="n">byte</span> <span class="n">pin_state_old</span><span class="p">[];</span>
  <span class="k">extern</span> <span class="n">byte</span> <span class="n">debounce_delay</span><span class="p">;</span>

  <span class="c1">//Define the two PCA9555D multiplexers
</span><span class="c1"></span>  <span class="k">extern</span> <span class="n">PCA9555</span> <span class="n">board_0x20</span><span class="p">;</span> <span class="c1">//16 GPIO pins
</span><span class="c1"></span>  <span class="k">extern</span> <span class="n">PCA9555</span> <span class="n">board_0x21</span><span class="p">;</span> <span class="c1">//16 GPIO pins
</span><span class="c1"></span>
  <span class="c1">//NeoPixels
</span><span class="c1"></span>  <span class="cp">#define pin_NEO 0
</span><span class="cp"></span>  <span class="cp">#define led_count 217
</span><span class="cp"></span>
  <span class="c1">// extern Adafruit_NeoPixel strip;
</span><span class="c1"></span>  <span class="k">extern</span> <span class="n">byte</span> <span class="n">pixels</span><span class="p">[];</span>
  <span class="k">extern</span> <span class="n">tinyNeoPixel</span> <span class="n">strip</span><span class="p">;</span>
</code></pre></div><p>Next, within a <code>.cpp</code> (or the main <code>.ino</code>) file I would <em>define</em> the variable, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">byte</span> <span class="n">pin_state</span><span class="p">[</span><span class="n">num_pieces</span><span class="p">];</span>
<span class="n">byte</span> <span class="n">pin_state_old</span><span class="p">[</span><span class="n">num_pieces</span><span class="p">];</span>

<span class="n">PCA9555</span> <span class="nf">board_0x20</span><span class="p">(</span><span class="mh">0x20</span><span class="p">);</span>
<span class="n">PCA9555</span> <span class="nf">board_0x21</span><span class="p">(</span><span class="mh">0x21</span><span class="p">);</span>
</code></pre></div><p>Even though I defined the <code>pin_state</code> only in my PCA9555D file, I could use it in the main <code>.ino</code> file as well.</p>
<h3 id="simplex-noise-patterns">Simplex Noise Patterns</h3>
<p>I had an idea of what I roughly wanted to happen beneath the puzzle pieces in terms of light; I wanted to use <em>Perlin</em> (or <em>Simplex</em>) noise to create a slowly undulating flow of colors moving across the board. I&rsquo;ve briefly used Perlin noise before with my <code>p5.js</code> example in the &ldquo;<a class="link" href="../blog/week-15/#p5js" >Interface &amp; Application Programming</a>&rdquo; week.</p>
<p>For my case I was looking for 3-dimensional noise; I&rsquo;d need two dimensions for the grid itself, and a third dimension for <em>time</em>, to be able to have a moving noise field. And it seems noise isn&rsquo;t of much interest in the Arduino community. I was able to find some simple snippets of code shared across forum posts that were usually 1-, sometimes 2-dimensional. There is a <a class="link" href="https://github.com/jshaw/SimplexNoise"  target="_blank" rel="noopener"
    ><code>SimplexNoise</code> library</a>, but it&rsquo;s only 2D. I found that the <code>FastLed</code> library <em>did</em> have (fast) 3-dimensional noise functions. Damn! Yet <em>another</em> reason I wish it would work on my ATtiny <span class="kaomoji">ಥ﹏ಥ</span>
</p>
<p>I finally came across some code for 3D Simplex Noise on <a class="link" href="https://forum.arduino.cc/t/perlin-noise-generator/7099/2"  target="_blank" rel="noopener"
    >this</a> forum post. However, after some tests, I found that the values are not well spread between <code>[-1,1]</code>; they hardly ever got above <code>0.8</code>.</p>
<p>I therefore expanded my search for general <em>C++</em> libraries. Most were too complex code that I didn&rsquo;t expect I could rewrite to work for my Sketch in Arduino. However, <a class="link" href="https://github.com/SRombauts/SimplexNoise"  target="_blank" rel="noopener"
    >this</a> <code>SimplexNoise</code> library was promising. I downloaded the <code>SimplexNoise.h</code> and <code>SimplexNoise.cpp</code> files from the <code>src</code> folder and placed them in a <code>SimplexNoise</code> folder within my Arduino <code>libraries</code> folder.</p>
<p>I started out with compilation errors of course. But after deleting the <code>#pragma once</code> from the <code>.h</code> file and replacing the <code>#include &lt;cstddef&gt;</code> with <code>#include &quot;Arduino.h&quot; #include &quot;stdlib.h&quot;</code> it worked! These noise values <em>did</em> seem to run between <code>[-1,1]</code>, and it felt a little faster too.</p>
<p>I first applied the noise value to the brightness of the NeoPixels. Simply looping over all of them and using their hexagonal grid coordinates as the <code>x</code> and <code>y</code> values of the <code>noise</code> function.</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="n">delta_time</span> <span class="o">+=</span> <span class="mf">0.0004</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="n">byte</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">led_count</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="n">SimplexNoise</span><span class="o">::</span><span class="n">noise</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">x_grid</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">/</span><span class="mf">5.</span><span class="p">,</span> 
                                      <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">y_grid</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">/</span><span class="mf">5.</span><span class="p">,</span>
                                    <span class="n">delta_time</span><span class="p">);</span>
    <span class="c1">//An adjusted map function that works on floats
</span><span class="c1"></span>    <span class="kt">float</span> <span class="n">brightness</span> <span class="o">=</span> <span class="n">mapf</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">,</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">);</span>
    <span class="n">strip</span><span class="p">.</span><span class="n">setPixelColor</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">255</span><span class="o">*</span><span class="n">brightness</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span><span class="c1">//for p
</span></code></pre></div><p>I actually had to se the overall brightness quite low before you could see the resulting pattern. And my camera was almost unable to detect it, I hope you can see it in the video below:</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='program_noise_brightness.mp4' type="video/mp4"></video>
     
    
    <figcaption>Using Simplex noise to adjust the brightness across the grid</figcaption>
    
</figure>
<p>The noise pattern became much more visible once I used it to adjust the <em>hue</em> of each NeoPixel:</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='program_noise_color.mp4' type="video/mp4"></video>
     
    
    <figcaption>Using Simplex noise to adjust the color across the grid was much more visible</figcaption>
    
</figure>
<p>I didn&rsquo;t quite like the green color, so I adjusted the hue scale so green would lie on the outskirts of the hue (so the value would need to be near -1 or 1 to become green). Since <em>hue</em> cycles through all the colors (see <a class="link" href="https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-use#hsv-hue-saturation-value-colors-dot-dot-dot-3024464-41"  target="_blank" rel="noopener"
    >this</a> helpful diagram on the AdaFruit website), I could easily move the <code>0</code> point of the <em>hue</em> to lie around pink:</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++">    <span class="n">value</span> <span class="o">=</span> <span class="n">SimplexNoise</span><span class="o">::</span><span class="n">noise</span><span class="p">(...);</span>
    <span class="c1">//Map to (a section of) hue, which goes to 0 - 65535
</span><span class="c1"></span>    <span class="c1">//Moving green to the outer reaches
</span><span class="c1"></span>    <span class="n">hue</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">mapf</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">,</span> <span class="o">-</span><span class="mf">45000.</span><span class="p">,</span> <span class="mf">22000.</span><span class="p">);</span>
    <span class="c1">//Get a gamma corrected RGB color from the hue and set to the NeoPixel
</span><span class="c1"></span>    <span class="kt">uint32_t</span> <span class="n">rgb_color</span> <span class="o">=</span> <span class="n">strip</span><span class="p">.</span><span class="n">gamma32</span><span class="p">(</span><span class="n">strip</span><span class="p">.</span><span class="n">ColorHSV</span><span class="p">(</span><span class="n">hue</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">));</span>
    <span class="n">strip</span><span class="p">.</span><span class="n">setPixelColor</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">rgb_color</span><span class="p">);</span>
</code></pre></div><p><figure style="flex-grow: 122; flex-basis: 294px">
		<a href="../final-project/program_red_green.jpg" data-size="500x408">
			
			<img src="../final-project/program_red_green.jpg"
				
				width="500"
				height="408"
				loading="lazy"
				alt="A mostly red/green color palette">
		</a>
		
		<figcaption>A mostly red/green color palette</figcaption>
		
	</figure> <figure style="flex-grow: 134; flex-basis: 321px">
		<a href="../final-project/program_pink_purple.jpg" data-size="500x373">
			
			<img src="../final-project/program_pink_purple.jpg"
				
				width="500"
				height="373"
				loading="lazy"
				alt="I settled on a pink/purple vibe">
		</a>
		
		<figcaption>I settled on a pink/purple vibe</figcaption>
		
	</figure></p>
<h3 id="reacting-to-pieces">Reacting to Pieces</h3>
<p>My next step was to only turn on the NeoPixels that were assigned to puzzle pieces placed on the board.</p>
<p>I looked into using the <em>interrupt</em> pins that I had assigned on my PCA555D multiplexers, using:</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">//The interrupt pins of the PCA9555Ds
</span><span class="c1"></span><span class="cp">#define PIN_INT_0x20 7
</span><span class="cp">#define PIN_INT_0x21 10
</span><span class="cp"></span>
<span class="n">PCA9555</span> <span class="nf">board_0x20</span><span class="p">(</span><span class="mh">0x20</span><span class="p">,</span> <span class="n">PIN_INT_0x20</span><span class="p">);</span>
<span class="n">PCA9555</span> <span class="nf">board_0x21</span><span class="p">(</span><span class="mh">0x21</span><span class="p">,</span> <span class="n">PIN_INT_0x21</span><span class="p">);</span>
</code></pre></div><p>However, every time I placed a puzzle piece, my code would freeze, and I had no idea what to do with this. I looked into the code of the <a class="link" href="https://github.com/nicoverduin/PCA9555/blob/master/clsPCA9555.cpp"  target="_blank" rel="noopener"
    ><code>clsPCA9555</code> library</a>, where the <code>alertISR()</code> function is called. I checked out the <a class="link" href="https://www.arduino.cc/reference/en/language/functions/external-interrupts/attachinterrupt/"  target="_blank" rel="noopener"
    ><code>attachInterrupt</code></a> function, which seemed to indicate that the program should <em>not</em> stop. I also checked out the <a class="link" href="https://github.com/SpenceKonde/megaTinyCore/blob/master/megaavr/extras/PinInterrupts.md"  target="_blank" rel="noopener"
    >pin interrupts</a> on the <code>megaTinyCore</code> docs. However, in the end I had no idea how to proceed and decided to not use those to interrupt pins at all, and just keep doing a <code>digitalRead</code> of all the pins on each loop.</p>
<p>I significantly changed my code. Instead of looping over each NeoPixel, I looped over each <em>puzzle piece</em>. I check if that pin&rsquo;s state indicates a puzzle is placed. If no, move one and keep the associated NeoPixels off, if yes, request the <code>noise</code> value and set all associated NeoPixels to their colors.</p>
<p>To keep the details short, I created an array for each piece that holds the NeoPixels <code>id</code> associated with them:</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">//Which NeoPixels belong to which puzzle piece
</span><span class="c1"></span><span class="n">byte</span> <span class="n">piece_0</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">};</span>
<span class="n">byte</span> <span class="n">piece_1</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">23</span><span class="p">};</span>
<span class="c1">//etc...
</span></code></pre></div><p>Next, I made a <code>struct</code> so I could put all these pieces into an array, together with some other variables I wanted to keep track off per puzzle piece.</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#define numElements(x) (sizeof(x) / sizeof(x[0]))
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">byte</span> <span class="o">*</span><span class="n">pieces</span><span class="p">;</span>
    <span class="n">byte</span> <span class="n">num_elements</span><span class="p">;</span> <span class="c1">//number of NeoPixels
</span><span class="c1"></span>    <span class="k">const</span> <span class="n">byte</span> <span class="n">center_id</span><span class="p">;</span> <span class="c1">//the &#34;center&#34; NeoPixel id
</span><span class="c1"></span>    <span class="n">byte</span> <span class="n">pin_index</span><span class="p">;</span> <span class="c1">//the pin id this piece belongs to
</span><span class="c1"></span>    <span class="n">byte</span> <span class="n">piece_state</span><span class="p">;</span> <span class="c1">//the state of that pin
</span><span class="c1"></span>    <span class="kt">bool</span> <span class="n">piece_placed</span><span class="p">;</span> <span class="c1">//is the piece just placed
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">last_debounce_time</span><span class="p">;</span> <span class="c1">//used for debouncing
</span><span class="c1"></span><span class="p">}</span> <span class="n">pieces</span><span class="p">;</span>

<span class="c1">//Put all the puzzle piece IDs into a struct array
</span><span class="c1"></span><span class="n">pieces</span> <span class="n">piece_matrix</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="n">piece_0</span><span class="p">,</span>  <span class="n">numElements</span><span class="p">(</span><span class="n">piece_0</span><span class="p">),</span>  <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
    <span class="p">{</span><span class="n">piece_1</span><span class="p">,</span>  <span class="n">numElements</span><span class="p">(</span><span class="n">piece_1</span><span class="p">),</span>  <span class="mi">14</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
    <span class="c1">//etc...
</span><span class="c1"></span><span class="p">]</span>
</code></pre></div><p>I only managed to figure out how to use a <code>struct</code> in such a handy manner to combine puzzle pieces with a different number of NeoPixels assigned to them, with the help of <a class="link" href="https://forum.arduino.cc/t/multi-dimensional-arrays-with-different-number-of-elements/557252/2"  target="_blank" rel="noopener"
    >this</a> forum answer.</p>
<p>I could then loop over each puzzle piece and their internal NeoPixels (even though each puzzle piece had a different number of NeoPixels):</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">//Some code to check the pin states
</span><span class="c1">//...
</span><span class="c1"></span>
<span class="c1">//Check which NeoPixels to turn on
</span><span class="c1">//Loop over each puzzle piece
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="n">byte</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">num_pieces</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Check if the puzzle is on the puzzle plate
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">piece_matrix</span><span class="p">[</span><span class="n">p</span><span class="p">].</span><span class="n">piece_state</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Loop over the puzzle pieces
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="n">byte</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">piece_matrix</span><span class="p">[</span><span class="n">p</span><span class="p">].</span><span class="n">num_elements</span><span class="p">;</span> <span class="n">l</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//Get the 0-217 index of the NeoPixel
</span><span class="c1"></span>            <span class="n">index</span> <span class="o">=</span> <span class="n">piece_matrix</span><span class="p">[</span><span class="n">p</span><span class="p">].</span><span class="n">pieces</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
            <span class="c1">//Get a Simplex Noise value for that coordinate in the hex grid
</span><span class="c1"></span>            <span class="n">value</span> <span class="o">=</span> <span class="n">SimplexNoise</span><span class="o">::</span><span class="n">noise</span><span class="p">(...);</span>
            <span class="c1">//etc..
</span><span class="c1"></span>            <span class="c1">//...
</span><span class="c1"></span>            <span class="c1">//...
</span><span class="c1"></span>        <span class="p">}</span><span class="c1">//for l
</span><span class="c1"></span>    <span class="p">}</span><span class="c1">//if
</span><span class="c1"></span><span class="p">}</span><span class="c1">//for p
</span></code></pre></div><p>I placed a few pieces on my board, and it worked as I hoped! <span class="kaomoji">(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧</span>
</p>
<p><strong>Note</strong> | My camera seems to be completely unable to properly capture the colors that I&rsquo;m seeing with my eyes. The colors in the photos are more &hellip;. jagged? sharp? Whereas my eyes are seeing much more nuanced colors fading into each other.</p>
<p><figure style="flex-grow: 100; flex-basis: 240px">
		<a href="../final-project/program_puzzle_only_light.jpg" data-size="500x500">
			
			<img src="../final-project/program_puzzle_only_light.jpg"
				
				width="500"
				height="500"
				loading="lazy"
				alt=" ">
		</a>
		
		<figcaption></figcaption>
		
	</figure> <figure style="flex-grow: 161; flex-basis: 387px">
		<a href="../final-project/program_puzzle_only_light_more.jpg" data-size="600x372">
			
			<img src="../final-project/program_puzzle_only_light_more.jpg"
				
				width="600"
				height="372"
				loading="lazy"
				alt="The NeoPixels are only on below the pieces placed">
		</a>
		
		<figcaption>The NeoPixels are only on below the pieces placed</figcaption>
		
	</figure></p>
<p>Because of the acrylic layer diffusing the light, it scatters farther than the edge of the puzzle piece. I&rsquo;d expected this already, and I actually quite liked the look.</p>
<p>Because I would move the puzzle pieces a little as I was placing new ones, the light below already placed pieces often flickered as I placed new pieces. I therefore implemented the <em>debounce</em> technique from the <a class="link" href="https://www.arduino.cc/en/Tutorial/BuiltInExamples/Debounce"  target="_blank" rel="noopener"
    >Arduino examples</a>. This uses a time delay to check if a state change of a pin lasts long enough before acting on it. I <em>really</em> didn&rsquo;t want any flickering, so I set the <code>debounce_delay</code> quite long to <code>500ms</code>.</p>
<p>Placing new pieces now didn&rsquo;t make the already placed pieces flicker anymore.</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='program_place_piece.mp4' type="video/mp4"></video>
     
    
    <figcaption>Placing new pieces lights up their NeoPixels</figcaption>
    
</figure>
<p>Eventually I decided to keep a puzzle piece location as &ldquo;placed&rdquo; once a piece had been registered there. Taking the puzzle piece away, thereby breaking the contact, would keep the NeoPixels on. I had to do this, because it was just too easy to move pieces around while you placed new pieces, and pieces placed on the board long ago could then turn off after all.</p>
<p>I&rsquo;d have preferred it if my project would always register the piece when placed, but I already knew that the contacts I&rsquo;d made wouldn&rsquo;t perform perfectly. Generally, people making a jigsaw puzzle don&rsquo;t remove pieces once placed, so this solution seemed like the best way to remedy my issue.</p>
<h3 id="dynamic-memory-overflow">Dynamic Memory Overflow</h3>
<p>Around this time I started running into issues where I&rsquo;d upload my code, but the microcontroller crashed somewhere, it only did a few steps of a function and then&hellip; nothing&hellip;</p>
<p>Knowing that I was up against the max of my SRAM/Dynamic memory, I figured I&rsquo;d have overflown it during run time. I therefore started looking for ways to optimize my usage of SRAM. One of the solutions was to place as many <em>constant</em> variables in the <em>PROGMEM</em> memory (the Flash), and then retrieve whatever value you need during runtime, instead of having the full variable in SRAM all the time.</p>
<p>By now I&rsquo;d learned to <em>first</em> search the <code>megaTinyCore</code> docs, where I indeed found a section on <a class="link" href="https://github.com/SpenceKonde/megaTinyCore#memory-mapped-flash-no-need-to-declare-progmem"  target="_blank" rel="noopener"
    ><em>PROGMEM</em></a>. It mentions that you don&rsquo;t need to specifically call <code>PROGMEM</code> to allocate variables I want to store in the <em>Flash</em>. Instead I can simply define them as <code>const</code> (that page explains why). I therefore turned all (global) variables that were really constant to <code>const</code>. I think the compiler had already been quite smart and turned some of those variables to <code>const</code> for me, because the &ldquo;Dynamic Memory %&rdquo; that the compiler outputs only went down by 10%, but that did fix the issue for now.</p>
<p>I continued to run up / battle against dynamic memory overflow issues from this moment forward. Having to jump through hoops to make an animation work while not creating new variables that were too big. I have to admit, it didn&rsquo;t make the coding very fun, having to constantly downsize an idea in my head to something much simpler because I couldn&rsquo;t make the variables that I&rsquo;d need for them (e.g. there was no space to save the previous color of all NeoPixels, so I could do gradual changes, or have two animations flow into each other).</p>
<h4 id="color-issues">Color Issues</h4>
<p>For one of my effects I wanted to have an &ldquo;explosion&rdquo; of light starting from the center of a newly placed puzzle piece radiating outward. To be able to let this ripple through the Simplex noise color field I had to save the color of each NeoPixel that I wanted to pass the ripple through, so I could set it back after the ripple had passed. If I only used a ripple of one NeoPixel wide, the largest ripple would contain <code>8*6=64</code> NeoPixels (the maximum radius is 8), for which I&rsquo;d require <code>64*3=144</code> bytes to save the color and <code>64</code> more bytes to save the index location, totalling to <code>208</code> bytes, which was just about what I could still use.</p>
<p><figure style="flex-grow: 119; flex-basis: 285px">
		<a href="../final-project/program_light_spark_white.jpg" data-size="500x420">
			
			<img src="../final-project/program_light_spark_white.jpg"
				
				width="500"
				height="420"
				loading="lazy"
				alt="Starting with a simple &ldquo;spark&rdquo; pattern when no other lights are on">
		</a>
		
		<figcaption>Starting with a simple “spark” pattern when no other lights are on</figcaption>
		
	</figure></p>
<p>It took some time to make this work, and eventually I though I had it, making use of <code>strip.getPixelColor(i)</code> to get the color that was set to NeoPixel <code>i</code>. However, once I used the color I retrieved to set the NeoPixel back to it&rsquo;s original color, it wasn&rsquo;t right. It looked much whiter.</p>
<p>I therefore made a simple test; I set one pixel to a known RGB value, I then requested the color of that NeoPixel with <code>getPixelColor()</code> and printed out the separate red, green, and blue values.</p>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="n">strip</span><span class="p">.</span><span class="n">setPixelColor</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">187</span><span class="p">);</span>  
<span class="kt">uint32_t</span> <span class="n">old_color</span> <span class="o">=</span> <span class="n">strip</span><span class="p">.</span><span class="n">getPixelColor</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;r: &#34;</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">((</span><span class="kt">uint8_t</span><span class="p">)(</span><span class="n">old_color</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">));</span> <span class="c1">//pixels[l*3+1];
</span><span class="c1"></span><span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34; g: &#34;</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">((</span><span class="kt">uint8_t</span><span class="p">)(</span><span class="n">old_color</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">));</span>  <span class="c1">//pixels[l*3];
</span><span class="c1"></span><span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34; b: &#34;</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">((</span><span class="kt">uint8_t</span><span class="p">)(</span><span class="n">old_color</span> <span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">));</span>  <span class="c1">//pixels[l*3+2];
</span></code></pre></div><p>But the printed RGB values were <em>not</em> the same as <code>124, 156, 187</code>, instead it was <code>125, 220, 186</code>. Strange&hellip;. I knew that there was <em>something</em> with <code>setBrightness</code> that I used during the <code>setup</code> function to lower the overall brightness of the NeoPixels. I therefore started an online search.</p>
<p>I discovered through two <a class="link" href="https://forums.adafruit.com/viewtopic.php?f=47&amp;t=69758"  target="_blank" rel="noopener"
    >forum</a> <a class="link" href="https://github.com/adafruit/Adafruit_NeoPixel/issues/191"  target="_blank" rel="noopener"
    >posts</a> that you can use <code>setBrightness</code> and <code>getPixelColor</code> separately, but never in the same code. The <code>setBrightness</code> does things to the color send to the pixel that cannot be retrieved/restored when <code>getPixelColor</code> is used.</p>
<p>I deactivated <code>setBrightness</code> and indeed, now the Serial print statements where giving back the same color as I&rsquo;d set the pixel at. I didn&rsquo;t need full brightness though, it actually made the colors look washed out, because they all started to diffuse so much that they blended towards white. Instead, I used the fact that the last parameter in the NeoPixel library&rsquo;s <code>ColorHSV(hue, saturation, value)</code> is the <em>brightness</em> of a color. I played around a little and found that using a <code>value</code> of <code>160</code> was about similar to what I had before when using <code>setBrightness</code> to lower the overall brightness.</p>
<p>In the video below you can see a random &ldquo;light spark&rdquo; going across the board, setting the already on NeoPixels back to their original color after the spark has passed:</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='program_light_spark.mp4' type="video/mp4"></video>
     
    
    <figcaption>Placing new pieces lights up their NeoPixels</figcaption>
    
</figure>
<p>In the video the spark is always white, but I later adjusted it to run from yellow-orange-red-pink-purple-blue as the radius increases. The spark goes by so fast that you hardly notice, but I feel that it looks a bit better than just white.</p>
<h3 id="start-animation">Start Animation</h3>
<p>I iterated with a few possible animations that happen when you plug in the power. A small &ldquo;look, I&rsquo;m working&rdquo; signal that was also fun. I started by using the same (white) light spark I created for placing a new puzzle piece, but always starting from the central NeoPixel.</p>
<p>I then moved on to making the NeoPixels turn on an off following a spiral pattern, where the colors were following the rainbow (without green again)</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='program_spiral_animation.mp4' type="video/mp4"></video>
     
    
    <figcaption>Testing an animation that turns on the NeoPixels along a spiral, with rainbow colors</figcaption>
    
</figure>
<p>However, I felt that it took too long, and increasing its speed wasn&rsquo;t making it better. I therefore returned to the idea of a &ldquo;spark&rdquo; radiating outward from the center, and combined both ideas. Instead of turning each NeoPixel on one at a time, I turned a full ring on. It was still a rainbow, but it looked more like an elaborate spark effect.</p>

<figure >
    
        <video class='controls' controls="true" playsinline ><source src='program_intro_animation_color_wave.mp4' type="video/mp4"></video>
     
    
    <figcaption>Turning the NeoPixels on per radius, not per separate NeoPixel</figcaption>
    
</figure>
<p>I liked the look, and after some tinkering with timings I was happy with the result.</p>
<p>With that I&rsquo;d made all the animations I had in mind, taking the fact into account that I couldn&rsquo;t do everything I originally had in mind, due to not having the space available in memory. I now had an animation for when the power was turned on, when a puzzle piece was on the board, when a new piece was placed, and when the final piece was placed, which felt like enough.</p>
<p>Strange to get to this point, but with the programming completed my project was done! <span class="kaomoji">(　＾∇＾)</span>
 <strong>I&rsquo;ve called in <em>NOVA</em></strong>, because I&rsquo;m an astronomer and have a bias for all things space. A nova is a sudden increase in the light of a star, usually a &ldquo;tiny&rdquo; explosion, but not so bad that it explodes/implodes the star (which is a <em>supernova</em>). The tiny light spark that happens when you place a new piece on the board reminded me of a <em>nova</em> <span class="kaomoji">｡◕‿◕｡</span>
</p>
<p><figure style="flex-grow: 170; flex-basis: 409px">
		<a href="../final-project/program_final.jpg" data-size="820x481">
			
			<img src="../final-project/program_final.jpg"
				
				width="820"
				height="481"
				loading="lazy"
				alt="A &ldquo;hero shot&rdquo; of NOVA">
		</a>
		
		<figcaption>A “hero shot” of NOVA</figcaption>
		
	</figure></p>
<p>I spend two days creating the final presentation video and slide. I&rsquo;m not at all used to creating videos. I don&rsquo;t think I&rsquo;ve ever created a proper video before (I focus on static images), so I had no knowledge in this area. I stuck with <em>iMovie</em>, since it was already on my MacBook and it seemed easy enough to figure out quickly. I did run into some issues with the limitations of the program (you can only have one picture-in-picture effect at the same time, text titles that were just not good enough). I also didn&rsquo;t have any proper equipment, using a ladder, tape, a tiny tripod and my phone camera instead. But I hope my video is able to convey the journey and end result of working on this project <span class="kaomoji">(^▽^)</span>
</p>
<p><figure style="flex-grow: 180; flex-basis: 432px">
		<a href="../final-project/video_setup_living_room.jpg" data-size="600x333">
			
			<img src="../final-project/video_setup_living_room.jpg"
				
				width="600"
				height="333"
				loading="lazy"
				alt="The &ldquo;set-up&rdquo; for taking some shots for the final video">
		</a>
		
		<figcaption>The “set-up” for taking some shots for the final video</figcaption>
		
	</figure> <figure style="flex-grow: 69; flex-basis: 167px">
		<a href="../final-project/video_setup_bathroom.jpg" data-size="400x573">
			
			<img src="../final-project/video_setup_bathroom.jpg"
				
				width="400"
				height="573"
				loading="lazy"
				alt="The even more &ldquo;professional&rdquo; setup in my bathroom">
		</a>
		
		<figcaption>The even more “professional” setup in my bathroom</figcaption>
		
	</figure></p>
<h2 id="evaluation--implications">Evaluation &amp; Implications</h2>
<p>During the &ldquo;<a class="link" href="../blog/week-17/#evaluation" >Applications and Implications</a>&rdquo; week I&rsquo;d described how I see the evaluation of this project:</p>
<ul>
<li>
<p><strong>Overall</strong> | In the most general sense I see my final project as <strong>a success if people will have a fun time</strong> putting the puzzle together. Even better if they find it <em>even more special</em> than putting together a normal cardboard puzzle.</p>
<ul>
<li><em>Result</em> | After having shown the puzzle to a few people (and due to the pandemic, only having it actual be put together my even less people), it definitely made puzzling fun for me and the others that tried <span class="kaomoji">(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧</span>
. The light coming through the pieces is quite nice to look at, and it&rsquo;s also mesmerizing to watch the patterns change. I was also looking forward to another short &ldquo;light spark&rdquo; and seeing more lights turn on with each new piece being placed.</li>
</ul>
</li>
<li>
<p><strong>Appearance</strong> | From my personal perfectionist side and the importance that I put on how something &ldquo;looks&rdquo;, <strong>I also want my project to look beautiful</strong>. No &ldquo;acrylic box&rdquo; around some internal electronics. Instead, the way every part looks (especially if it&rsquo;s visible from the outside) will be as important to me as how the electronics will work internally.</p>
<ul>
<li><em>Result</em> | Tastes differ per person of course, but I&rsquo;m personally really happy with how it <em>looks</em>. I&rsquo;m especially happy with the living hinge wrapping around the outside. I may not have gotten that one-thick-wooden-top plate that I aimed for, but I&rsquo;m now quite happy with the 3-plates-of-3mm compromise that I went for. The puzzle pieces also look very nice, being quite thick with 5mm, the milky-white color, and with the spirograph lightly etched out of it. And the Simplex noise pattern that appears below the puzzle plate as you make the puzzle is quite lovely.</li>
</ul>
</li>
<li>
<p><strong>Technological</strong> | From a technical side, my final project will be a success if it <strong>manages to create a light show beneath all the puzzle pieces already on the board</strong>, to change its light show when a new puzzle piece is placed, and that no LEDs beneath empty places turn on, or LEDs beneath already placed pieces turn off or flicker.</p>
<ul>
<li><em>Result</em> | This part isn&rsquo;t 100% perfect sadly. The connections between the copper tape at the bottom of the puzzle pieces and the rivets in the bottom is quite easy to disturb and disconnect. This results in both puzzle pieces being placed that aren&rsquo;t registered until you move the piece around a bit, and already placed pieces losing their connection as you push other pieces into place. The latter issue I could solve by making sure that once a piece is placed, I always set its state to &ldquo;placed, keep NeoPixels on&rdquo;. However, for the part where not all pieces being placed are immediately registered, I can only tell people making the puzzle to expect this, and try to wiggle a piece if its NeoPixels remain off. Using a <em>debounce</em> technique I do make sure that no flickering occurs. However, I&rsquo;d still say that overall I&rsquo;ve succeeded here as well, having to wiggle some puzzle pieces a little when placed hasn&rsquo;t really taken much of the fun experience away I find <span class="kaomoji">(^▽^)</span>
</li>
</ul>
</li>
</ul>
<p>I really only made this project for myself, and friends &amp; family, to play. I have no intention of turning it into a product/company.</p>
<h3 id="things-to-improve">Things to Improve</h3>
<p>Below are a few things that I think would improve the overall way the puzzle works and looks.</p>
<ul>
<li>The copper pads below each piece cast a bit of a shadow that&rsquo;s noticeable. I don&rsquo;t know <em>how</em> to change it, but it would be perfect if nothing &ldquo;light blocking&rdquo; had to be placed on the puzzle piece at all (while still being registered as being placed).</li>
<li>It&rsquo;s too easy for some of the pieces to loose contact with the copper rivets. It would be better to use something such as tiny springs instead that would be gently pushed down as a puzzle piece was being placed onto it.</li>
<li>It would be <em>even</em> better if I could&rsquo;ve hidden the connection beneath the puzzle bottom layer, so there wouldn&rsquo;t be 114 tiny dark circles in there. But again, I have no idea what technique would make that possible and reacts well and reliable.</li>
<li>I used horizontal header pins to create all of my connections from the microcontroller/PCA9555D pins to wires. In general, it would&rsquo;ve probably been better to use a different way to connect wires and pins. However, the way that I ended up doing it had the unexpected bonus that my electronics was <em>really</em> flat, fitting inside the puzzle&rsquo;s bottom area.</li>
</ul>
<h2 id="bill-of-materials">Bill of Materials</h2>
<p>Below I&rsquo;ve outlined all of the components that are in my final project. You&rsquo;ll also need some wires to solder between the copper rivets and the PCBs, a soldering iron and solder.</p>
<h4 id="pcbs">PCBs</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>FR1 6&quot;x8&rdquo; single side</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€1.15</td>
<td><a class="link" href="https://www.inventables.com/categories/materials/circuit-board-blanks"  target="_blank" rel="noopener"
    >Inventables</a></td>
<td>$42.72 for 25 packs of 6 boards</td>
</tr>
<tr>
<td>ATtiny3216</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.94</td>
<td><a class="link" href="https://www.digikey.nl/product-detail/en/microchip-technology/ATTINY3216-SFR/ATTINY3216-SFRCT-ND/9477802"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>PCAA9555D I2C GPIO expander</td>
<td style="text-align:right">2</td>
<td style="text-align:right">€1.55</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=PCA9555D"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>01x03 Female connector</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.47</td>
<td><a class="link" href="https://www.digikey.nl/product-detail/en/gct/BG300-03-A-L-A/2073-BG300-03-A-L-ACT-ND/9859664"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>Male 1 row connector</td>
<td style="text-align:right">2</td>
<td style="text-align:right">€3.50</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=S1143E-36-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td>Split into 1x 2, 8x 4, 4x 5 and 2x 6 pins</td>
</tr>
<tr>
<td>Headerpins stackable 4 pins</td>
<td style="text-align:right">8</td>
<td style="text-align:right">€0.25</td>
<td><a class="link" href="https://www.bitsandparts.nl/Headerpins-stackable-11mm-4-pins-p106521"  target="_blank" rel="noopener"
    >Bits &amp; Parts</a></td>
<td></td>
</tr>
<tr>
<td>Capacitor 1μF</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.23</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=445-1423-1-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>LED - red</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.05</td>
<td><a class="link" href="https://www.digikey.nl/product-detail/en/lumex-opto-components-inc/SML-LX1206IC-TR/67-1356-2-ND/229140"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>LED - white</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.50</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=160-1737-1-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>LED - blue</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.31</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=160-1889-1-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>Resistor 0 Ω</td>
<td style="text-align:right">2</td>
<td style="text-align:right">€0.08</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=311-0.0ERCT-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>Resistor 470 Ω</td>
<td style="text-align:right">4</td>
<td style="text-align:right">€0.08</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=311-499FRCT-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>Resistor 5k Ω</td>
<td style="text-align:right">4</td>
<td style="text-align:right">€0.08</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=311-4.99KFRCT-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
<tr>
<td>Resistor 10k Ω</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.08</td>
<td><a class="link" href="https://www.digikey.nl/products/en?keywords=311-10.0KFRCT-ND"  target="_blank" rel="noopener"
    >Digi-Key</a></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="power">Power</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>DC 5V Power Supply - 5V 8A 40W</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€12.63</td>
<td><a class="link" href="https://nl.aliexpress.com/item/32810906485.html?spm=a2g0s.9042311.0.0.e8ce4c4dkJMNY7"  target="_blank" rel="noopener"
    >AliExpress</a></td>
<td></td>
</tr>
<tr>
<td>DC Female Plug - Terminal block 5.5x2.1mm</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€2.49</td>
<td><a class="link" href="https://www.onlinekabelshop.nl/dc-voeding-schroef-connector-v-2-1mm-x-5-5mm"  target="_blank" rel="noopener"
    >Online Kabelshop</a></td>
<td></td>
</tr>
<tr>
<td>DC Female Plug - Panel - 2.1mm</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€1.99</td>
<td><a class="link" href="https://www.onlinekabelshop.nl/soldeerbare-vrouwelijke-dc-inbouw-connector-2-1mm-voor-paneelmontage"  target="_blank" rel="noopener"
    >Online Kabelshop</a></td>
<td></td>
</tr>
<tr>
<td>DC Male Plug - 5.5x2.1mm</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€1.99</td>
<td><a class="link" href="https://www.onlinekabelshop.nl/soldeerbare-mannelijke-dc-connector-2-1mm-x-5-5mm-9mm"  target="_blank" rel="noopener"
    >Online Kabelshop</a></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="neopixel-plate">NeoPixel plate</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>WS2812B NeoPixels</td>
<td style="text-align:right">217</td>
<td style="text-align:right">€0.06</td>
<td><a class="link" href="https://nl.aliexpress.com/item/2036819167.html"  target="_blank" rel="noopener"
    >AliExpress</a></td>
<td>€18.61 per 5m (300 NeoPixels)</td>
</tr>
<tr>
<td>Acrylic sheet - White - 4mm</td>
<td style="text-align:right">350x350mm</td>
<td style="text-align:right">€8.97</td>
<td><a class="link" href="https://www.dokter-plexiglas.nl/plexiglas-opaal-5mm"  target="_blank" rel="noopener"
    >Dokter Plexiglass</a></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="puzzle-plate">Puzzle plate</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copper PCB RIVETS 1.0mm</td>
<td style="text-align:right">114</td>
<td style="text-align:right">€0.04</td>
<td><a class="link" href="https://www.vpcinc.com/Category/Favorit-Through-Hole-Rivets-104.cfm"  target="_blank" rel="noopener"
    >VPC</a></td>
<td>$50 per 1000</td>
</tr>
<tr>
<td>Acrylic sheet - Opal - 4mm</td>
<td style="text-align:right">350x350mm</td>
<td style="text-align:right">€6.96</td>
<td><a class="link" href="https://www.dokter-plexiglas.nl/plexiglas-opaal-4mm"  target="_blank" rel="noopener"
    >Dokter Plexiglass</a></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="puzzle-pieces">Puzzle Pieces</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copper Foil with conductive adhesive</td>
<td style="text-align:right">6&quot;x6&quot;</td>
<td style="text-align:right">€0.93</td>
<td><a class="link" href="https://www.budnick.com/Products/advanced-search#textSearch=3M%20%231126"  target="_blank" rel="noopener"
    >Budnick</a></td>
<td>$246.04 per 36 yrds</td>
</tr>
<tr>
<td>Acrylic sheet - Opal - 5mm</td>
<td style="text-align:right">350x350mm</td>
<td style="text-align:right">€9.52</td>
<td><a class="link" href="https://www.dokter-plexiglas.nl/plexiglas-opaal-4mm"  target="_blank" rel="noopener"
    >Dokter Plexiglass</a></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="wooden-enclosure">(Wooden) Enclosure</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hardwood Multiplex 3mm sheet</td>
<td style="text-align:right">2 * 610x1220mm</td>
<td style="text-align:right">€4.49</td>
<td><a class="link" href="https://www.praxis.nl/bouwmaterialen/hout/multiplex/hardhouten-multiplex-61x122cm-3-6mm/5661362"  target="_blank" rel="noopener"
    >Praxis</a></td>
<td></td>
</tr>
<tr>
<td>Hardwood Multiplex 9mm sheet</td>
<td style="text-align:right">610x1220mm</td>
<td style="text-align:right">€7.19</td>
<td><a class="link" href="https://www.gamma.nl/assortiment/multiplex-hardhout-122x61-cm-9-mm/p/B437779"  target="_blank" rel="noopener"
    >Gamma</a></td>
<td></td>
</tr>
<tr>
<td>M5 60mm sunken bolt + nut</td>
<td style="text-align:right">6</td>
<td style="text-align:right">€0.23</td>
<td><a class="link" href="https://www.praxis.nl/gereedschap-installatiemateriaal/ijzerwaren/bouten/sencys-metaalschroef-verzonken-kop-en-moer-gegalvaniseerd-m5-60mm-10-stuks/5367457"  target="_blank" rel="noopener"
    >Praxis</a></td>
<td>€2.29 per 10</td>
</tr>
<tr>
<td>M5 10mm insert nut</td>
<td style="text-align:right">6</td>
<td style="text-align:right">€0.49</td>
<td>Praxis</td>
<td>Not online</td>
</tr>
<tr>
<td>M5 40mm bolt + nut</td>
<td style="text-align:right">6</td>
<td style="text-align:right">€0.19</td>
<td><a class="link" href="https://www.praxis.nl/gereedschap-installatiemateriaal/ijzerwaren/bouten/sencys-zeskantbout-gegalvaniseerd-met-moer-m5-40mm-10-stuks/5367557"  target="_blank" rel="noopener"
    >Praxis</a></td>
<td>€1.86 per 10</td>
</tr>
<tr>
<td>M5 nut</td>
<td style="text-align:right">12</td>
<td style="text-align:right">€0.06</td>
<td><a class="link" href="https://www.praxis.nl/gereedschap-installatiemateriaal/ijzerwaren/moeren/sencys-zeskantmoer-m5-40-stuks/5367596"  target="_blank" rel="noopener"
    >Praxis</a></td>
<td>€2.54 per 40</td>
</tr>
<tr>
<td>Wood glue 75g - Transparent</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€2.49</td>
<td><a class="link" href="https://www.gamma.nl/assortiment/bison-houtlijm-flacon-75-gram/p/B457042"  target="_blank" rel="noopener"
    >Gamma</a></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="other">Other</h4>
<table>
<thead>
<tr>
<th>Component</th>
<th style="text-align:right">Qty.</th>
<th style="text-align:right">Price p.p.</th>
<th>Shop</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Black Velvet Bag</td>
<td style="text-align:right">1</td>
<td style="text-align:right">€0.80</td>
<td><a class="link" href="https://saketos.nl/1066-fluwelen-zakjes-18x24-cm-5st-zwart-5902565684921.html"  target="_blank" rel="noopener"
    >Saketos</a></td>
<td>€3.99 per 5</td>
</tr>
</tbody>
</table>
<p>This totals to €106. Not taking into account the hours required to make it all of course. A pricey puzzle indeed. But one of a kind <span class="kaomoji">(^.~)</span>
</p>
<h2 id="all-the-files-together">All the Files Together</h2>
<ul>
<li>
<p><strong>Puzzle Pieces</strong></p>
<ul>
<li>SVG file of the puzzle pieces - Laser Cut | <a class="link" href="files/puzzle_pieces_cut.svg" >SVG</a></li>
<li>SVG file of the copper contacts - Vinyl Cut | <a class="link" href="files/puzzle_pieces_copper_contacts.svg" >SVG</a></li>
</ul>
</li>
<li>
<p><strong>Contact Plate</strong></p>
<ul>
<li>DXF file of the line etchings - Laser Cut | <a class="link" href="files/contact_plate_line_etches.dxf" >DXF</a></li>
<li>DXF file of the plate - Laser Cut | <a class="link" href="files/contact_plate_cuts.dxf" >DXF</a></li>
</ul>
</li>
<li>
<p><strong>NeoPixel Plate</strong></p>
<ul>
<li>DXF file of NeoPixel strip etchings - Laser Cut | <a class="link" href="files/neopixel_plate_etches.dxf" >DXF</a></li>
<li>DXF file of the NeoPixel plate - Laser Cut | <a class="link" href="files/neopixel_plate_cuts.dxf" >DXF</a></li>
</ul>
</li>
<li>
<p><strong>Wooden Enclosure</strong></p>
<ul>
<li>DXF file of the bottom plate - CNC Milling | <a class="link" href="files/enclosure_bottom_plate_mill.dxf" >DXF</a></li>
<li>DXF file of the bottom living hinge joint plate - Laser Cut | <a class="link" href="files/enclosure_bottom_joint_plate_cut.dxf" >DXF</a></li>
<li>DXF file of living hinge - Laser Cut | <a class="link" href="files/enclosure_living_hinge.dxf" >DXF</a></li>
<li>DXF file of the top living hing joint plate - Laser Cut | <a class="link" href="files/enclosure_top_joint_plate.dxf" >DXF</a></li>
<li>DXF file of the top plate - puzzle outline layer - Laser Cut | <a class="link" href="files/enclosure_top_plate_puzzle_cut.dxf" >DXF</a></li>
<li>DXF file of the top plate - middle layer - Laser Cut | <a class="link" href="files/enclosure_top_plate_middle_cut.dxf" >DXF</a></li>
<li>DXF file of the top plate - top layer - Laser Cut | <a class="link" href="files/enclosure_top_plate_top_cut.dxf" >DXF</a></li>
</ul>
</li>
<li>
<p><strong>Spirograph</strong></p>
<ul>
<li>PNG to use for engraving the puzzle pieces and three top plate layers - Laser Cut | <a class="link" href="files/spirograph.png" >PNG</a></li>
<li>SVG of the spirograph pattern | <a class="link" href="files/spirograph.svg" >SVG</a></li>
</ul>
</li>
<li>
<p><strong>Electronics</strong></p>
<ul>
<li>KiCad Schematic | <a class="link" href="files/kicad_schematic.pdf" >PDF</a></li>
<li>KiCad design files | <a class="link" href="files/kicad_files.zip" >ZIP</a></li>
<li>PCB Traces &amp; Interior files | <a class="link" href="files/kicad_traces_interior.zip" >ZIP</a></li>
</ul>
</li>
<li>
<p><strong>Design</strong></p>
<ul>
<li>Mapping of the NeoPixels to hexagonal grid coordinates and puzzle IDs | <a class="link" href="files/mapping_hexagonal_grid.afdesign" >AFDESIGN</a></li>
<li>Fusion 360 STL model of the puzzle box (minus the living hinge and puzzle pieces) | <a class="link" href="files/design_fusion360.stl" >STL</a></li>
</ul>
</li>
<li>
<p><strong>Programming</strong></p>
<ul>
<li>Arduino code with all separate files | <a class="link" href="files/arduino_code.zip" >ZIP</a></li>
</ul>
</li>
</ul>
<h2 id="license">License</h2>
<p>This project is shared under the <a class="link" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"  target="_blank" rel="noopener"
    ><strong>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</strong> license</a></p>

</section>


    <footer class="article-footer">
    

    <section class="article-social-icons">
        <a class="share_icon" title="Follow me on Twitter" href="https://twitter.com/NadiehBremer"><svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-brand-twitter" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
  <path d="M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z" />
</svg></a>
        <a class="share_icon" title="Follow me on Instagram" href="https://instagram.com/NadiehBremer"><svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-brand-instagram" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
  <rect x="4" y="4" width="16" height="16" rx="4" />
  <circle cx="12" cy="12" r="3" />
  <line x1="16.5" y1="7.5" x2="16.5" y2="7.501" />
</svg></a>
    </section></footer>

    
</article>

    <footer class="site-footer">
    <section class="copyright">
        &copy; 2021 Nadieh&#39;s Fab Academy | <a href="../student-agreement">Student Agreement</a>
    </section>
    
    <section class="powerby">
        Built with <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> | Using a personally adjusted version of the theme <a href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener" data-version="%s">Stack</a>
    </section>
</footer>

    
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    
    <div class="pswp__bg"></div>

    
    <div class="pswp__scroll-wrap">

        
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        
        <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

                

                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                <button class="pswp__button pswp__button--share" title="Share"></button>

                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                
                
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>

            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>

        </div>

    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe-ui-default.min.js"></script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/default-skin/default-skin.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe.css">

            </main>
    
        <aside class="sidebar right-sidebar sticky">
    <section class="widget toc">
        <h2 class="widget-title section-title">TABLE OF CONTENTS</h2>
        <div id="toc-wrapper">
            <h3 class="page-title">Final Project</h3>
            <nav id="TableOfContents">
  <ul>
    <li><a href="#final-result">Final Result</a>
      <ul>
        <li><a href="#hero-shots">Hero Shots</a></li>
      </ul>
    </li>
    <li><a href="#sketch--idea">Sketch &amp; Idea</a></li>
    <li><a href="#3d-model">3D Model</a></li>
    <li><a href="#input-sensor-tests">Input Sensor Tests</a></li>
    <li><a href="#the-puzzle-pieces">The Puzzle Pieces</a>
      <ul>
        <li><a href="#copper-plate-bridges">Copper Plate Bridges</a></li>
        <li><a href="#drawing-the-pieces">Drawing the Pieces</a></li>
        <li><a href="#prototyping">Prototyping</a></li>
        <li><a href="#copper-contact-bridges">Copper Contact Bridges</a></li>
        <li><a href="#spirograph-design">Spirograph Design</a></li>
        <li><a href="#laser-cutting">Laser Cutting</a></li>
        <li><a href="#the-bag">The Bag</a></li>
      </ul>
    </li>
    <li><a href="#the-pcbs">The PCBs</a></li>
    <li><a href="#the-neopixel-grid">The NeoPixel Grid</a></li>
    <li><a href="#the-contact-plate">The Contact Plate</a>
      <ul>
        <li><a href="#contact-point-prototypes">Contact Point Prototypes</a></li>
        <li><a href="#creating-the-contact-plate">Creating the Contact Plate</a></li>
        <li><a href="#soldering--glueing-the-rivets">Soldering &amp; Glueing the Rivets</a></li>
        <li><a href="#connecting-to-the-pins">Connecting to the Pins</a></li>
        <li><a href="#testing-the-connections">Testing the Connections</a></li>
      </ul>
    </li>
    <li><a href="#the-wooden-enclosure">The Wooden Enclosure</a>
      <ul>
        <li><a href="#living-hinges">Living Hinges</a></li>
        <li><a href="#joint-plates">Joint Plates</a></li>
        <li><a href="#top-plate">Top Plate</a></li>
      </ul>
    </li>
    <li><a href="#programming">Programming</a>
      <ul>
        <li><a href="#splitting-the-code">Splitting the Code</a></li>
        <li><a href="#simplex-noise-patterns">Simplex Noise Patterns</a></li>
        <li><a href="#reacting-to-pieces">Reacting to Pieces</a></li>
        <li><a href="#dynamic-memory-overflow">Dynamic Memory Overflow</a></li>
        <li><a href="#start-animation">Start Animation</a></li>
      </ul>
    </li>
    <li><a href="#evaluation--implications">Evaluation &amp; Implications</a>
      <ul>
        <li><a href="#things-to-improve">Things to Improve</a></li>
      </ul>
    </li>
    <li><a href="#bill-of-materials">Bill of Materials</a>
      <ul>
        <li></li>
      </ul>
    </li>
    <li><a href="#all-the-files-together">All the Files Together</a></li>
    <li><a href="#license">License</a></li>
  </ul>
</nav>
        </div>
    </section>
</aside>

<script>
    
    
    window.addEventListener('DOMContentLoaded', () => {
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                const id = entry.target.getAttribute('id');
                if (entry.intersectionRatio > 0) {
                    clearActiveStatesInTableOfContents()
                    document.querySelector(`nav li a[href="#${id}"]`).parentElement.classList.add('active');
                } else {
                    
                }
            });
        });
    
        
        document.querySelectorAll('h2[id], h3[id]').forEach((section) => {
            observer.observe(section);
        });
        
    });

    function clearActiveStatesInTableOfContents() {
        document.querySelectorAll('aside #TableOfContents li').forEach((section) => {
            section.classList.remove('active');
        });
    }
</script>
    

        </div>
        <script src="https://cdn.jsdelivr.net/npm/node-vibrant@3.1.5/dist/vibrant.min.js"
    integrity="sha256-5NovOZc4iwiAWTYIFiIM7DxKUXKWvpVEuMEPLzcm5/g=" crossorigin="anonymous"></script><script type="text/javascript" src="../ts/main.js" defer></script>

<script>
    
    
    let table = document.getElementsByTagName("table")

    if(table.length > 0) {
        for(let i = 0; i < table.length; i++) {
            table[i].addEventListener("click", (e) => {
                let target = e.target
                if(target.localName === "code") {
                    let range = document.createRange()
                    range.selectNodeContents(target)  
                    let sel = document.getSelection()
                    sel.removeAllRanges()
                    sel.addRange(range)
        
                    document.execCommand('copy')
                    sel.removeAllRanges()

                    
                    target.classList.add('copy-animate')
                    setTimeout(() => {
                        target.classList.remove('copy-animate')
                    }, 400)
                }
            })
        }
    }
</script>
    </body>
</html>
